
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000023f8 memsz 0x000023f8 flags r-x
    LOAD off    0x00003418 vaddr 0x00012418 paddr 0x0001372c align 2**12
         filesz 0x00001314 memsz 0x00001314 flags rw-
    LOAD off    0x00004a40 vaddr 0x00014a40 paddr 0x00014a40 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000219c  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  000123cc  000123cc  000033cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001314  00012418  0001372c  00003418  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00014a40  00014a40  00004a40  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00014b60  00014b60  0000472c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000472c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005c0  00000000  00000000  00004750  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000729b  00000000  00000000  00004d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000029b8  00000000  00000000  0000bfab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002c0c  00000000  00000000  0000e963  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b08  00000000  00000000  00011570  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001ab1  00000000  00000000  00012078  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000063b  00000000  00000000  00013b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00014164  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001a0  00000000  00000000  00014178  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00015d4e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00015d51  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00015d5d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00015d5e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00015d5f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00015d63  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00015d67  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00015d6b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00015d76  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00015d81  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  00015d8c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000013  00000000  00000000  00015d92  2**0
                  CONTENTS, READONLY
 29 .jdi          00004ddb  00000000  00000000  00015da5  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004b937  00000000  00000000  0001ab80  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
000123cc l    d  .rodata	00000000 .rodata
00012418 l    d  .rwdata	00000000 .rwdata
00014a40 l    d  .bss	00000000 .bss
00014b60 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
00010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00012418 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00010460 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000105b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000106f4 l     F .text	00000034 alt_dev_reg
000124f8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000109d0 l     F .text	0000020c altera_avalon_jtag_uart_irq
00010bdc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00011340 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011474 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000114a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011840 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000119a0 l     F .text	0000003c alt_get_errno
000119dc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014a5c g     O .bss	00000004 alt_instruction_exception_handler
0001054c g     F .text	0000006c alt_main
000102a0 g     F .text	00000080 _puts_r
00014a60 g     O .bss	00000100 alt_irq
0001372c g       *ABS*	00000000 __flash_rwdata_start
00011e4c g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00014a40 g     O .bss	00000004 errno
00014a48 g     O .bss	00000004 alt_argv
0001b700 g       *ABS*	00000000 _gp
00013580 g     O .rwdata	00000180 alt_fd_list
00011e70 g     F .text	00000090 alt_find_dev
000121b8 g     F .text	00000028 memcpy
00011924 g     F .text	0000007c alt_io_redirect
00010320 g     F .text	00000014 puts
000120cc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00010dd4 g     F .text	0000021c altera_avalon_jtag_uart_read
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00013718 g     O .rwdata	00000004 alt_max_fd
00013700 g     O .rwdata	00000004 _global_impure_ptr
00014b60 g       *ABS*	00000000 __bss_end
00011750 g     F .text	000000f0 alt_iic_isr_register
00011d44 g     F .text	00000108 alt_tick
00011704 g     F .text	0000004c alt_ic_irq_enabled
00011ca8 g     F .text	0000009c alt_alarm_stop
00014a50 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
00013558 g     O .rwdata	00000028 alt_dev_null
00011454 g     F .text	00000020 alt_dcache_flush_all
0001372c g       *ABS*	00000000 __ram_rwdata_end
00013710 g     O .rwdata	00000008 alt_dev_list
000105f4 g     F .text	00000100 write
00012418 g       *ABS*	00000000 __ram_rodata_end
00014b60 g       *ABS*	00000000 end
00010910 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001bb80 g       *ABS*	00000000 __alt_stack_pointer
00010ff0 g     F .text	00000224 altera_avalon_jtag_uart_write
000121e0 g     F .text	00000190 __call_exitprocs
00010230 g     F .text	0000003c _start
00014a54 g     O .bss	00000004 _alt_tick_rate
00014a58 g     O .bss	00000004 _alt_nticks
00010760 g     F .text	0000004c alt_sys_init
00010c7c g     F .text	00000068 altera_avalon_jtag_uart_close
00012370 g     F .text	00000028 .hidden __mulsi3
00012418 g       *ABS*	00000000 __ram_rwdata_start
000123cc g       *ABS*	00000000 __ram_rodata_start
000107ac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00012008 g     F .text	000000c4 alt_get_fd
00012188 g     F .text	00000030 memcmp
0001086c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014b60 g       *ABS*	00000000 __alt_stack_base
000108bc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00011f00 g     F .text	00000108 alt_find_file
000114dc g     F .text	000000a4 alt_dev_llist_insert
00010350 g     F .text	000000b8 __sfvwrite_small_dev
00014a40 g       *ABS*	00000000 __bss_start
0001026c g     F .text	00000034 main
00014a4c g     O .bss	00000004 alt_envp
0001080c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001371c g     O .rwdata	00000004 alt_errno
000123cc g       *ABS*	00000000 __flash_rodata_start
00010728 g     F .text	00000038 alt_irq_init
00011c24 g     F .text	00000084 alt_release_fd
00010408 g     F .text	00000058 _write_r
00013704 g     O .rwdata	00000004 _impure_ptr
00014a44 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00013708 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000115a0 g     F .text	00000050 alt_ic_isr_register
0001372c g       *ABS*	00000000 _edata
00014b60 g       *ABS*	00000000 _end
00010230 g       *ABS*	00000000 __ram_exceptions_end
00010ce4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00011678 g     F .text	0000008c alt_ic_irq_disable
00012168 g     F .text	00000020 exit
0001bb80 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00012398 g     F .text	00000034 _exit
00011214 g     F .text	0000012c alt_alarm_start
00010334 g     F .text	0000001c strlen
00011ac8 g     F .text	0000015c open
00011580 g     F .text	00000020 alt_icache_flush_all
00013720 g     O .rwdata	00000004 alt_priority_mask
000115f0 g     F .text	00000088 alt_ic_irq_enable
00013724 g     O .rwdata	00000008 alt_alarm_list
0001137c g     F .text	000000d8 close
000104c8 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	00800074 	movhi	r2,1
   10140:	10929804 	addi	r2,r2,19040
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	00800074 	movhi	r2,1
   10158:	10929804 	addi	r2,r2,19040
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <__alt_data_end+0xffff45ac>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <__alt_data_end+0xffff45a0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a4d717 	ldw	r2,-27812(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a4d717 	ldw	r2,-27812(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10234:	deeee014 	ori	sp,sp,48000
    movhi gp, %hi(_gp)
   10238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1023c:	d6adc014 	ori	gp,gp,46848
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10244:	10929014 	ori	r2,r2,19008

    movhi r3, %hi(__bss_end)
   10248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1024c:	18d2d814 	ori	r3,r3,19296

    beq r2, r3, 1f
   10250:	10c00326 	beq	r2,r3,10260 <_start+0x30>

0:
    stw zero, (r2)
   10254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1025c:	10fffd36 	bltu	r2,r3,10254 <__alt_data_end+0xffff46d4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10260:	00104c80 	call	104c8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10264:	001054c0 	call	1054c <alt_main>

00010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10268:	003fff06 	br	10268 <__alt_data_end+0xffff46e8>

0001026c <main>:
 */

#include <stdio.h>

int main()
{
   1026c:	defffe04 	addi	sp,sp,-8
   10270:	dfc00115 	stw	ra,4(sp)
   10274:	df000015 	stw	fp,0(sp)
   10278:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   1027c:	01000074 	movhi	r4,1
   10280:	2108f304 	addi	r4,r4,9164
   10284:	00103200 	call	10320 <puts>

  return 0;
   10288:	0005883a 	mov	r2,zero
}
   1028c:	e037883a 	mov	sp,fp
   10290:	dfc00117 	ldw	ra,4(sp)
   10294:	df000017 	ldw	fp,0(sp)
   10298:	dec00204 	addi	sp,sp,8
   1029c:	f800283a 	ret

000102a0 <_puts_r>:
   102a0:	defffd04 	addi	sp,sp,-12
   102a4:	dc000015 	stw	r16,0(sp)
   102a8:	2021883a 	mov	r16,r4
   102ac:	2809883a 	mov	r4,r5
   102b0:	dfc00215 	stw	ra,8(sp)
   102b4:	dc400115 	stw	r17,4(sp)
   102b8:	2823883a 	mov	r17,r5
   102bc:	00103340 	call	10334 <strlen>
   102c0:	81400217 	ldw	r5,8(r16)
   102c4:	01000074 	movhi	r4,1
   102c8:	2100d404 	addi	r4,r4,848
   102cc:	29000115 	stw	r4,4(r5)
   102d0:	100f883a 	mov	r7,r2
   102d4:	880d883a 	mov	r6,r17
   102d8:	8009883a 	mov	r4,r16
   102dc:	00103500 	call	10350 <__sfvwrite_small_dev>
   102e0:	00ffffc4 	movi	r3,-1
   102e4:	10c00926 	beq	r2,r3,1030c <_puts_r+0x6c>
   102e8:	81400217 	ldw	r5,8(r16)
   102ec:	01800074 	movhi	r6,1
   102f0:	01c00044 	movi	r7,1
   102f4:	28800117 	ldw	r2,4(r5)
   102f8:	3188f804 	addi	r6,r6,9184
   102fc:	8009883a 	mov	r4,r16
   10300:	103ee83a 	callr	r2
   10304:	10bfffe0 	cmpeqi	r2,r2,-1
   10308:	0085c83a 	sub	r2,zero,r2
   1030c:	dfc00217 	ldw	ra,8(sp)
   10310:	dc400117 	ldw	r17,4(sp)
   10314:	dc000017 	ldw	r16,0(sp)
   10318:	dec00304 	addi	sp,sp,12
   1031c:	f800283a 	ret

00010320 <puts>:
   10320:	00800074 	movhi	r2,1
   10324:	108dc104 	addi	r2,r2,14084
   10328:	200b883a 	mov	r5,r4
   1032c:	11000017 	ldw	r4,0(r2)
   10330:	00102a01 	jmpi	102a0 <_puts_r>

00010334 <strlen>:
   10334:	2005883a 	mov	r2,r4
   10338:	10c00007 	ldb	r3,0(r2)
   1033c:	18000226 	beq	r3,zero,10348 <strlen+0x14>
   10340:	10800044 	addi	r2,r2,1
   10344:	003ffc06 	br	10338 <__alt_data_end+0xffff47b8>
   10348:	1105c83a 	sub	r2,r2,r4
   1034c:	f800283a 	ret

00010350 <__sfvwrite_small_dev>:
   10350:	2880000b 	ldhu	r2,0(r5)
   10354:	1080020c 	andi	r2,r2,8
   10358:	10002126 	beq	r2,zero,103e0 <__sfvwrite_small_dev+0x90>
   1035c:	2880008f 	ldh	r2,2(r5)
   10360:	defffa04 	addi	sp,sp,-24
   10364:	dc000015 	stw	r16,0(sp)
   10368:	dfc00515 	stw	ra,20(sp)
   1036c:	dd000415 	stw	r20,16(sp)
   10370:	dcc00315 	stw	r19,12(sp)
   10374:	dc800215 	stw	r18,8(sp)
   10378:	dc400115 	stw	r17,4(sp)
   1037c:	2821883a 	mov	r16,r5
   10380:	10001216 	blt	r2,zero,103cc <__sfvwrite_small_dev+0x7c>
   10384:	2027883a 	mov	r19,r4
   10388:	3025883a 	mov	r18,r6
   1038c:	3823883a 	mov	r17,r7
   10390:	05010004 	movi	r20,1024
   10394:	04400b0e 	bge	zero,r17,103c4 <__sfvwrite_small_dev+0x74>
   10398:	880f883a 	mov	r7,r17
   1039c:	a440010e 	bge	r20,r17,103a4 <__sfvwrite_small_dev+0x54>
   103a0:	01c10004 	movi	r7,1024
   103a4:	8140008f 	ldh	r5,2(r16)
   103a8:	900d883a 	mov	r6,r18
   103ac:	9809883a 	mov	r4,r19
   103b0:	00104080 	call	10408 <_write_r>
   103b4:	0080050e 	bge	zero,r2,103cc <__sfvwrite_small_dev+0x7c>
   103b8:	88a3c83a 	sub	r17,r17,r2
   103bc:	90a5883a 	add	r18,r18,r2
   103c0:	003ff406 	br	10394 <__alt_data_end+0xffff4814>
   103c4:	0005883a 	mov	r2,zero
   103c8:	00000706 	br	103e8 <__sfvwrite_small_dev+0x98>
   103cc:	8080000b 	ldhu	r2,0(r16)
   103d0:	10801014 	ori	r2,r2,64
   103d4:	8080000d 	sth	r2,0(r16)
   103d8:	00bfffc4 	movi	r2,-1
   103dc:	00000206 	br	103e8 <__sfvwrite_small_dev+0x98>
   103e0:	00bfffc4 	movi	r2,-1
   103e4:	f800283a 	ret
   103e8:	dfc00517 	ldw	ra,20(sp)
   103ec:	dd000417 	ldw	r20,16(sp)
   103f0:	dcc00317 	ldw	r19,12(sp)
   103f4:	dc800217 	ldw	r18,8(sp)
   103f8:	dc400117 	ldw	r17,4(sp)
   103fc:	dc000017 	ldw	r16,0(sp)
   10400:	dec00604 	addi	sp,sp,24
   10404:	f800283a 	ret

00010408 <_write_r>:
   10408:	defffd04 	addi	sp,sp,-12
   1040c:	dc000015 	stw	r16,0(sp)
   10410:	04000074 	movhi	r16,1
   10414:	dc400115 	stw	r17,4(sp)
   10418:	84129004 	addi	r16,r16,19008
   1041c:	2023883a 	mov	r17,r4
   10420:	2809883a 	mov	r4,r5
   10424:	300b883a 	mov	r5,r6
   10428:	380d883a 	mov	r6,r7
   1042c:	dfc00215 	stw	ra,8(sp)
   10430:	80000015 	stw	zero,0(r16)
   10434:	00105f40 	call	105f4 <write>
   10438:	00ffffc4 	movi	r3,-1
   1043c:	10c0031e 	bne	r2,r3,1044c <_write_r+0x44>
   10440:	80c00017 	ldw	r3,0(r16)
   10444:	18000126 	beq	r3,zero,1044c <_write_r+0x44>
   10448:	88c00015 	stw	r3,0(r17)
   1044c:	dfc00217 	ldw	ra,8(sp)
   10450:	dc400117 	ldw	r17,4(sp)
   10454:	dc000017 	ldw	r16,0(sp)
   10458:	dec00304 	addi	sp,sp,12
   1045c:	f800283a 	ret

00010460 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10460:	defffc04 	addi	sp,sp,-16
   10464:	df000315 	stw	fp,12(sp)
   10468:	df000304 	addi	fp,sp,12
   1046c:	e13ffd15 	stw	r4,-12(fp)
   10470:	e17ffe15 	stw	r5,-8(fp)
   10474:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10478:	e0fffe17 	ldw	r3,-8(fp)
   1047c:	e0bffd17 	ldw	r2,-12(fp)
   10480:	18800c26 	beq	r3,r2,104b4 <alt_load_section+0x54>
  {
    while( to != end )
   10484:	00000806 	br	104a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10488:	e0bffe17 	ldw	r2,-8(fp)
   1048c:	10c00104 	addi	r3,r2,4
   10490:	e0fffe15 	stw	r3,-8(fp)
   10494:	e0fffd17 	ldw	r3,-12(fp)
   10498:	19000104 	addi	r4,r3,4
   1049c:	e13ffd15 	stw	r4,-12(fp)
   104a0:	18c00017 	ldw	r3,0(r3)
   104a4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   104a8:	e0fffe17 	ldw	r3,-8(fp)
   104ac:	e0bfff17 	ldw	r2,-4(fp)
   104b0:	18bff51e 	bne	r3,r2,10488 <__alt_data_end+0xffff4908>
    {
      *to++ = *from++;
    }
  }
}
   104b4:	0001883a 	nop
   104b8:	e037883a 	mov	sp,fp
   104bc:	df000017 	ldw	fp,0(sp)
   104c0:	dec00104 	addi	sp,sp,4
   104c4:	f800283a 	ret

000104c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   104c8:	defffe04 	addi	sp,sp,-8
   104cc:	dfc00115 	stw	ra,4(sp)
   104d0:	df000015 	stw	fp,0(sp)
   104d4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   104d8:	01800074 	movhi	r6,1
   104dc:	318dcb04 	addi	r6,r6,14124
   104e0:	01400074 	movhi	r5,1
   104e4:	29490604 	addi	r5,r5,9240
   104e8:	01000074 	movhi	r4,1
   104ec:	210dcb04 	addi	r4,r4,14124
   104f0:	00104600 	call	10460 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   104f4:	01800074 	movhi	r6,1
   104f8:	31808c04 	addi	r6,r6,560
   104fc:	01400074 	movhi	r5,1
   10500:	29400804 	addi	r5,r5,32
   10504:	01000074 	movhi	r4,1
   10508:	21000804 	addi	r4,r4,32
   1050c:	00104600 	call	10460 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10510:	01800074 	movhi	r6,1
   10514:	31890604 	addi	r6,r6,9240
   10518:	01400074 	movhi	r5,1
   1051c:	2948f304 	addi	r5,r5,9164
   10520:	01000074 	movhi	r4,1
   10524:	2108f304 	addi	r4,r4,9164
   10528:	00104600 	call	10460 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1052c:	00114540 	call	11454 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10530:	00115800 	call	11580 <alt_icache_flush_all>
}
   10534:	0001883a 	nop
   10538:	e037883a 	mov	sp,fp
   1053c:	dfc00117 	ldw	ra,4(sp)
   10540:	df000017 	ldw	fp,0(sp)
   10544:	dec00204 	addi	sp,sp,8
   10548:	f800283a 	ret

0001054c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1054c:	defffd04 	addi	sp,sp,-12
   10550:	dfc00215 	stw	ra,8(sp)
   10554:	df000115 	stw	fp,4(sp)
   10558:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1055c:	0009883a 	mov	r4,zero
   10560:	00107280 	call	10728 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10564:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10568:	00107600 	call	10760 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1056c:	01800074 	movhi	r6,1
   10570:	3188f904 	addi	r6,r6,9188
   10574:	01400074 	movhi	r5,1
   10578:	2948f904 	addi	r5,r5,9188
   1057c:	01000074 	movhi	r4,1
   10580:	2108f904 	addi	r4,r4,9188
   10584:	00119240 	call	11924 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10588:	d0a4d117 	ldw	r2,-27836(gp)
   1058c:	d0e4d217 	ldw	r3,-27832(gp)
   10590:	d124d317 	ldw	r4,-27828(gp)
   10594:	200d883a 	mov	r6,r4
   10598:	180b883a 	mov	r5,r3
   1059c:	1009883a 	mov	r4,r2
   105a0:	001026c0 	call	1026c <main>
   105a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   105a8:	01000044 	movi	r4,1
   105ac:	001137c0 	call	1137c <close>
  exit (result);
   105b0:	e13fff17 	ldw	r4,-4(fp)
   105b4:	00121680 	call	12168 <exit>

000105b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   105b8:	defffe04 	addi	sp,sp,-8
   105bc:	dfc00115 	stw	ra,4(sp)
   105c0:	df000015 	stw	fp,0(sp)
   105c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   105c8:	d0a00717 	ldw	r2,-32740(gp)
   105cc:	10000326 	beq	r2,zero,105dc <alt_get_errno+0x24>
   105d0:	d0a00717 	ldw	r2,-32740(gp)
   105d4:	103ee83a 	callr	r2
   105d8:	00000106 	br	105e0 <alt_get_errno+0x28>
   105dc:	d0a4d004 	addi	r2,gp,-27840
}
   105e0:	e037883a 	mov	sp,fp
   105e4:	dfc00117 	ldw	ra,4(sp)
   105e8:	df000017 	ldw	fp,0(sp)
   105ec:	dec00204 	addi	sp,sp,8
   105f0:	f800283a 	ret

000105f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   105f4:	defff904 	addi	sp,sp,-28
   105f8:	dfc00615 	stw	ra,24(sp)
   105fc:	df000515 	stw	fp,20(sp)
   10600:	df000504 	addi	fp,sp,20
   10604:	e13ffd15 	stw	r4,-12(fp)
   10608:	e17ffe15 	stw	r5,-8(fp)
   1060c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10610:	e0bffd17 	ldw	r2,-12(fp)
   10614:	10000816 	blt	r2,zero,10638 <write+0x44>
   10618:	01400304 	movi	r5,12
   1061c:	e13ffd17 	ldw	r4,-12(fp)
   10620:	00123700 	call	12370 <__mulsi3>
   10624:	1007883a 	mov	r3,r2
   10628:	00800074 	movhi	r2,1
   1062c:	108d6004 	addi	r2,r2,13696
   10630:	1885883a 	add	r2,r3,r2
   10634:	00000106 	br	1063c <write+0x48>
   10638:	0005883a 	mov	r2,zero
   1063c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10640:	e0bffb17 	ldw	r2,-20(fp)
   10644:	10002126 	beq	r2,zero,106cc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10648:	e0bffb17 	ldw	r2,-20(fp)
   1064c:	10800217 	ldw	r2,8(r2)
   10650:	108000cc 	andi	r2,r2,3
   10654:	10001826 	beq	r2,zero,106b8 <write+0xc4>
   10658:	e0bffb17 	ldw	r2,-20(fp)
   1065c:	10800017 	ldw	r2,0(r2)
   10660:	10800617 	ldw	r2,24(r2)
   10664:	10001426 	beq	r2,zero,106b8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10668:	e0bffb17 	ldw	r2,-20(fp)
   1066c:	10800017 	ldw	r2,0(r2)
   10670:	10800617 	ldw	r2,24(r2)
   10674:	e0ffff17 	ldw	r3,-4(fp)
   10678:	180d883a 	mov	r6,r3
   1067c:	e17ffe17 	ldw	r5,-8(fp)
   10680:	e13ffb17 	ldw	r4,-20(fp)
   10684:	103ee83a 	callr	r2
   10688:	e0bffc15 	stw	r2,-16(fp)
   1068c:	e0bffc17 	ldw	r2,-16(fp)
   10690:	1000070e 	bge	r2,zero,106b0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   10694:	00105b80 	call	105b8 <alt_get_errno>
   10698:	1007883a 	mov	r3,r2
   1069c:	e0bffc17 	ldw	r2,-16(fp)
   106a0:	0085c83a 	sub	r2,zero,r2
   106a4:	18800015 	stw	r2,0(r3)
        return -1;
   106a8:	00bfffc4 	movi	r2,-1
   106ac:	00000c06 	br	106e0 <write+0xec>
      }
      return rval;
   106b0:	e0bffc17 	ldw	r2,-16(fp)
   106b4:	00000a06 	br	106e0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   106b8:	00105b80 	call	105b8 <alt_get_errno>
   106bc:	1007883a 	mov	r3,r2
   106c0:	00800344 	movi	r2,13
   106c4:	18800015 	stw	r2,0(r3)
   106c8:	00000406 	br	106dc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   106cc:	00105b80 	call	105b8 <alt_get_errno>
   106d0:	1007883a 	mov	r3,r2
   106d4:	00801444 	movi	r2,81
   106d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   106dc:	00bfffc4 	movi	r2,-1
}
   106e0:	e037883a 	mov	sp,fp
   106e4:	dfc00117 	ldw	ra,4(sp)
   106e8:	df000017 	ldw	fp,0(sp)
   106ec:	dec00204 	addi	sp,sp,8
   106f0:	f800283a 	ret

000106f4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   106f4:	defffd04 	addi	sp,sp,-12
   106f8:	dfc00215 	stw	ra,8(sp)
   106fc:	df000115 	stw	fp,4(sp)
   10700:	df000104 	addi	fp,sp,4
   10704:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10708:	d1600404 	addi	r5,gp,-32752
   1070c:	e13fff17 	ldw	r4,-4(fp)
   10710:	00114dc0 	call	114dc <alt_dev_llist_insert>
}
   10714:	e037883a 	mov	sp,fp
   10718:	dfc00117 	ldw	ra,4(sp)
   1071c:	df000017 	ldw	fp,0(sp)
   10720:	dec00204 	addi	sp,sp,8
   10724:	f800283a 	ret

00010728 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10728:	defffd04 	addi	sp,sp,-12
   1072c:	dfc00215 	stw	ra,8(sp)
   10730:	df000115 	stw	fp,4(sp)
   10734:	df000104 	addi	fp,sp,4
   10738:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   1073c:	0011e4c0 	call	11e4c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10740:	00800044 	movi	r2,1
   10744:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10748:	0001883a 	nop
   1074c:	e037883a 	mov	sp,fp
   10750:	dfc00117 	ldw	ra,4(sp)
   10754:	df000017 	ldw	fp,0(sp)
   10758:	dec00204 	addi	sp,sp,8
   1075c:	f800283a 	ret

00010760 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10760:	defffe04 	addi	sp,sp,-8
   10764:	dfc00115 	stw	ra,4(sp)
   10768:	df000015 	stw	fp,0(sp)
   1076c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   10770:	000d883a 	mov	r6,zero
   10774:	000b883a 	mov	r5,zero
   10778:	01000074 	movhi	r4,1
   1077c:	21094804 	addi	r4,r4,9504
   10780:	00109100 	call	10910 <altera_avalon_jtag_uart_init>
   10784:	01000074 	movhi	r4,1
   10788:	21093e04 	addi	r4,r4,9464
   1078c:	00106f40 	call	106f4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   10790:	0001883a 	nop
}
   10794:	0001883a 	nop
   10798:	e037883a 	mov	sp,fp
   1079c:	dfc00117 	ldw	ra,4(sp)
   107a0:	df000017 	ldw	fp,0(sp)
   107a4:	dec00204 	addi	sp,sp,8
   107a8:	f800283a 	ret

000107ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   107ac:	defffa04 	addi	sp,sp,-24
   107b0:	dfc00515 	stw	ra,20(sp)
   107b4:	df000415 	stw	fp,16(sp)
   107b8:	df000404 	addi	fp,sp,16
   107bc:	e13ffd15 	stw	r4,-12(fp)
   107c0:	e17ffe15 	stw	r5,-8(fp)
   107c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   107c8:	e0bffd17 	ldw	r2,-12(fp)
   107cc:	10800017 	ldw	r2,0(r2)
   107d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   107d4:	e0bffc17 	ldw	r2,-16(fp)
   107d8:	10c00a04 	addi	r3,r2,40
   107dc:	e0bffd17 	ldw	r2,-12(fp)
   107e0:	10800217 	ldw	r2,8(r2)
   107e4:	100f883a 	mov	r7,r2
   107e8:	e1bfff17 	ldw	r6,-4(fp)
   107ec:	e17ffe17 	ldw	r5,-8(fp)
   107f0:	1809883a 	mov	r4,r3
   107f4:	0010dd40 	call	10dd4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   107f8:	e037883a 	mov	sp,fp
   107fc:	dfc00117 	ldw	ra,4(sp)
   10800:	df000017 	ldw	fp,0(sp)
   10804:	dec00204 	addi	sp,sp,8
   10808:	f800283a 	ret

0001080c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1080c:	defffa04 	addi	sp,sp,-24
   10810:	dfc00515 	stw	ra,20(sp)
   10814:	df000415 	stw	fp,16(sp)
   10818:	df000404 	addi	fp,sp,16
   1081c:	e13ffd15 	stw	r4,-12(fp)
   10820:	e17ffe15 	stw	r5,-8(fp)
   10824:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10828:	e0bffd17 	ldw	r2,-12(fp)
   1082c:	10800017 	ldw	r2,0(r2)
   10830:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10834:	e0bffc17 	ldw	r2,-16(fp)
   10838:	10c00a04 	addi	r3,r2,40
   1083c:	e0bffd17 	ldw	r2,-12(fp)
   10840:	10800217 	ldw	r2,8(r2)
   10844:	100f883a 	mov	r7,r2
   10848:	e1bfff17 	ldw	r6,-4(fp)
   1084c:	e17ffe17 	ldw	r5,-8(fp)
   10850:	1809883a 	mov	r4,r3
   10854:	0010ff00 	call	10ff0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10858:	e037883a 	mov	sp,fp
   1085c:	dfc00117 	ldw	ra,4(sp)
   10860:	df000017 	ldw	fp,0(sp)
   10864:	dec00204 	addi	sp,sp,8
   10868:	f800283a 	ret

0001086c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1086c:	defffc04 	addi	sp,sp,-16
   10870:	dfc00315 	stw	ra,12(sp)
   10874:	df000215 	stw	fp,8(sp)
   10878:	df000204 	addi	fp,sp,8
   1087c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10880:	e0bfff17 	ldw	r2,-4(fp)
   10884:	10800017 	ldw	r2,0(r2)
   10888:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1088c:	e0bffe17 	ldw	r2,-8(fp)
   10890:	10c00a04 	addi	r3,r2,40
   10894:	e0bfff17 	ldw	r2,-4(fp)
   10898:	10800217 	ldw	r2,8(r2)
   1089c:	100b883a 	mov	r5,r2
   108a0:	1809883a 	mov	r4,r3
   108a4:	0010c7c0 	call	10c7c <altera_avalon_jtag_uart_close>
}
   108a8:	e037883a 	mov	sp,fp
   108ac:	dfc00117 	ldw	ra,4(sp)
   108b0:	df000017 	ldw	fp,0(sp)
   108b4:	dec00204 	addi	sp,sp,8
   108b8:	f800283a 	ret

000108bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   108bc:	defffa04 	addi	sp,sp,-24
   108c0:	dfc00515 	stw	ra,20(sp)
   108c4:	df000415 	stw	fp,16(sp)
   108c8:	df000404 	addi	fp,sp,16
   108cc:	e13ffd15 	stw	r4,-12(fp)
   108d0:	e17ffe15 	stw	r5,-8(fp)
   108d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   108d8:	e0bffd17 	ldw	r2,-12(fp)
   108dc:	10800017 	ldw	r2,0(r2)
   108e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   108e4:	e0bffc17 	ldw	r2,-16(fp)
   108e8:	10800a04 	addi	r2,r2,40
   108ec:	e1bfff17 	ldw	r6,-4(fp)
   108f0:	e17ffe17 	ldw	r5,-8(fp)
   108f4:	1009883a 	mov	r4,r2
   108f8:	0010ce40 	call	10ce4 <altera_avalon_jtag_uart_ioctl>
}
   108fc:	e037883a 	mov	sp,fp
   10900:	dfc00117 	ldw	ra,4(sp)
   10904:	df000017 	ldw	fp,0(sp)
   10908:	dec00204 	addi	sp,sp,8
   1090c:	f800283a 	ret

00010910 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10910:	defffa04 	addi	sp,sp,-24
   10914:	dfc00515 	stw	ra,20(sp)
   10918:	df000415 	stw	fp,16(sp)
   1091c:	df000404 	addi	fp,sp,16
   10920:	e13ffd15 	stw	r4,-12(fp)
   10924:	e17ffe15 	stw	r5,-8(fp)
   10928:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1092c:	e0bffd17 	ldw	r2,-12(fp)
   10930:	00c00044 	movi	r3,1
   10934:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10938:	e0bffd17 	ldw	r2,-12(fp)
   1093c:	10800017 	ldw	r2,0(r2)
   10940:	10800104 	addi	r2,r2,4
   10944:	1007883a 	mov	r3,r2
   10948:	e0bffd17 	ldw	r2,-12(fp)
   1094c:	10800817 	ldw	r2,32(r2)
   10950:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10954:	e0bffe17 	ldw	r2,-8(fp)
   10958:	e0ffff17 	ldw	r3,-4(fp)
   1095c:	d8000015 	stw	zero,0(sp)
   10960:	e1fffd17 	ldw	r7,-12(fp)
   10964:	01800074 	movhi	r6,1
   10968:	31827404 	addi	r6,r6,2512
   1096c:	180b883a 	mov	r5,r3
   10970:	1009883a 	mov	r4,r2
   10974:	00115a00 	call	115a0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10978:	e0bffd17 	ldw	r2,-12(fp)
   1097c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10980:	e0bffd17 	ldw	r2,-12(fp)
   10984:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10988:	d0e4d517 	ldw	r3,-27820(gp)
   1098c:	e1fffd17 	ldw	r7,-12(fp)
   10990:	01800074 	movhi	r6,1
   10994:	3182f704 	addi	r6,r6,3036
   10998:	180b883a 	mov	r5,r3
   1099c:	1009883a 	mov	r4,r2
   109a0:	00112140 	call	11214 <alt_alarm_start>
   109a4:	1000040e 	bge	r2,zero,109b8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   109a8:	e0fffd17 	ldw	r3,-12(fp)
   109ac:	00a00034 	movhi	r2,32768
   109b0:	10bfffc4 	addi	r2,r2,-1
   109b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   109b8:	0001883a 	nop
   109bc:	e037883a 	mov	sp,fp
   109c0:	dfc00117 	ldw	ra,4(sp)
   109c4:	df000017 	ldw	fp,0(sp)
   109c8:	dec00204 	addi	sp,sp,8
   109cc:	f800283a 	ret

000109d0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   109d0:	defff804 	addi	sp,sp,-32
   109d4:	df000715 	stw	fp,28(sp)
   109d8:	df000704 	addi	fp,sp,28
   109dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   109e0:	e0bfff17 	ldw	r2,-4(fp)
   109e4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   109e8:	e0bffb17 	ldw	r2,-20(fp)
   109ec:	10800017 	ldw	r2,0(r2)
   109f0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   109f4:	e0bffc17 	ldw	r2,-16(fp)
   109f8:	10800104 	addi	r2,r2,4
   109fc:	10800037 	ldwio	r2,0(r2)
   10a00:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10a04:	e0bffd17 	ldw	r2,-12(fp)
   10a08:	1080c00c 	andi	r2,r2,768
   10a0c:	10006d26 	beq	r2,zero,10bc4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10a10:	e0bffd17 	ldw	r2,-12(fp)
   10a14:	1080400c 	andi	r2,r2,256
   10a18:	10003526 	beq	r2,zero,10af0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10a1c:	00800074 	movhi	r2,1
   10a20:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10a24:	e0bffb17 	ldw	r2,-20(fp)
   10a28:	10800a17 	ldw	r2,40(r2)
   10a2c:	10800044 	addi	r2,r2,1
   10a30:	1081ffcc 	andi	r2,r2,2047
   10a34:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   10a38:	e0bffb17 	ldw	r2,-20(fp)
   10a3c:	10c00b17 	ldw	r3,44(r2)
   10a40:	e0bffe17 	ldw	r2,-8(fp)
   10a44:	18801526 	beq	r3,r2,10a9c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10a48:	e0bffc17 	ldw	r2,-16(fp)
   10a4c:	10800037 	ldwio	r2,0(r2)
   10a50:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10a54:	e0bff917 	ldw	r2,-28(fp)
   10a58:	10a0000c 	andi	r2,r2,32768
   10a5c:	10001126 	beq	r2,zero,10aa4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10a60:	e0bffb17 	ldw	r2,-20(fp)
   10a64:	10800a17 	ldw	r2,40(r2)
   10a68:	e0fff917 	ldw	r3,-28(fp)
   10a6c:	1809883a 	mov	r4,r3
   10a70:	e0fffb17 	ldw	r3,-20(fp)
   10a74:	1885883a 	add	r2,r3,r2
   10a78:	10800e04 	addi	r2,r2,56
   10a7c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10a80:	e0bffb17 	ldw	r2,-20(fp)
   10a84:	10800a17 	ldw	r2,40(r2)
   10a88:	10800044 	addi	r2,r2,1
   10a8c:	10c1ffcc 	andi	r3,r2,2047
   10a90:	e0bffb17 	ldw	r2,-20(fp)
   10a94:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10a98:	003fe206 	br	10a24 <__alt_data_end+0xffff4ea4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10a9c:	0001883a 	nop
   10aa0:	00000106 	br	10aa8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10aa4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10aa8:	e0bff917 	ldw	r2,-28(fp)
   10aac:	10bfffec 	andhi	r2,r2,65535
   10ab0:	10000f26 	beq	r2,zero,10af0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10ab4:	e0bffb17 	ldw	r2,-20(fp)
   10ab8:	10c00817 	ldw	r3,32(r2)
   10abc:	00bfff84 	movi	r2,-2
   10ac0:	1886703a 	and	r3,r3,r2
   10ac4:	e0bffb17 	ldw	r2,-20(fp)
   10ac8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10acc:	e0bffc17 	ldw	r2,-16(fp)
   10ad0:	10800104 	addi	r2,r2,4
   10ad4:	1007883a 	mov	r3,r2
   10ad8:	e0bffb17 	ldw	r2,-20(fp)
   10adc:	10800817 	ldw	r2,32(r2)
   10ae0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10ae4:	e0bffc17 	ldw	r2,-16(fp)
   10ae8:	10800104 	addi	r2,r2,4
   10aec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10af0:	e0bffd17 	ldw	r2,-12(fp)
   10af4:	1080800c 	andi	r2,r2,512
   10af8:	103fbe26 	beq	r2,zero,109f4 <__alt_data_end+0xffff4e74>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10afc:	e0bffd17 	ldw	r2,-12(fp)
   10b00:	1004d43a 	srli	r2,r2,16
   10b04:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10b08:	00001406 	br	10b5c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10b0c:	e0bffc17 	ldw	r2,-16(fp)
   10b10:	e0fffb17 	ldw	r3,-20(fp)
   10b14:	18c00d17 	ldw	r3,52(r3)
   10b18:	e13ffb17 	ldw	r4,-20(fp)
   10b1c:	20c7883a 	add	r3,r4,r3
   10b20:	18c20e04 	addi	r3,r3,2104
   10b24:	18c00003 	ldbu	r3,0(r3)
   10b28:	18c03fcc 	andi	r3,r3,255
   10b2c:	18c0201c 	xori	r3,r3,128
   10b30:	18ffe004 	addi	r3,r3,-128
   10b34:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10b38:	e0bffb17 	ldw	r2,-20(fp)
   10b3c:	10800d17 	ldw	r2,52(r2)
   10b40:	10800044 	addi	r2,r2,1
   10b44:	10c1ffcc 	andi	r3,r2,2047
   10b48:	e0bffb17 	ldw	r2,-20(fp)
   10b4c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10b50:	e0bffa17 	ldw	r2,-24(fp)
   10b54:	10bfffc4 	addi	r2,r2,-1
   10b58:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10b5c:	e0bffa17 	ldw	r2,-24(fp)
   10b60:	10000526 	beq	r2,zero,10b78 <altera_avalon_jtag_uart_irq+0x1a8>
   10b64:	e0bffb17 	ldw	r2,-20(fp)
   10b68:	10c00d17 	ldw	r3,52(r2)
   10b6c:	e0bffb17 	ldw	r2,-20(fp)
   10b70:	10800c17 	ldw	r2,48(r2)
   10b74:	18bfe51e 	bne	r3,r2,10b0c <__alt_data_end+0xffff4f8c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10b78:	e0bffa17 	ldw	r2,-24(fp)
   10b7c:	103f9d26 	beq	r2,zero,109f4 <__alt_data_end+0xffff4e74>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10b80:	e0bffb17 	ldw	r2,-20(fp)
   10b84:	10c00817 	ldw	r3,32(r2)
   10b88:	00bfff44 	movi	r2,-3
   10b8c:	1886703a 	and	r3,r3,r2
   10b90:	e0bffb17 	ldw	r2,-20(fp)
   10b94:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10b98:	e0bffb17 	ldw	r2,-20(fp)
   10b9c:	10800017 	ldw	r2,0(r2)
   10ba0:	10800104 	addi	r2,r2,4
   10ba4:	1007883a 	mov	r3,r2
   10ba8:	e0bffb17 	ldw	r2,-20(fp)
   10bac:	10800817 	ldw	r2,32(r2)
   10bb0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10bb4:	e0bffc17 	ldw	r2,-16(fp)
   10bb8:	10800104 	addi	r2,r2,4
   10bbc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10bc0:	003f8c06 	br	109f4 <__alt_data_end+0xffff4e74>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10bc4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   10bc8:	0001883a 	nop
   10bcc:	e037883a 	mov	sp,fp
   10bd0:	df000017 	ldw	fp,0(sp)
   10bd4:	dec00104 	addi	sp,sp,4
   10bd8:	f800283a 	ret

00010bdc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10bdc:	defff804 	addi	sp,sp,-32
   10be0:	df000715 	stw	fp,28(sp)
   10be4:	df000704 	addi	fp,sp,28
   10be8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10bec:	e0bffb17 	ldw	r2,-20(fp)
   10bf0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10bf4:	e0bff917 	ldw	r2,-28(fp)
   10bf8:	10800017 	ldw	r2,0(r2)
   10bfc:	10800104 	addi	r2,r2,4
   10c00:	10800037 	ldwio	r2,0(r2)
   10c04:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10c08:	e0bffa17 	ldw	r2,-24(fp)
   10c0c:	1081000c 	andi	r2,r2,1024
   10c10:	10000b26 	beq	r2,zero,10c40 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10c14:	e0bff917 	ldw	r2,-28(fp)
   10c18:	10800017 	ldw	r2,0(r2)
   10c1c:	10800104 	addi	r2,r2,4
   10c20:	1007883a 	mov	r3,r2
   10c24:	e0bff917 	ldw	r2,-28(fp)
   10c28:	10800817 	ldw	r2,32(r2)
   10c2c:	10810014 	ori	r2,r2,1024
   10c30:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10c34:	e0bff917 	ldw	r2,-28(fp)
   10c38:	10000915 	stw	zero,36(r2)
   10c3c:	00000a06 	br	10c68 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10c40:	e0bff917 	ldw	r2,-28(fp)
   10c44:	10c00917 	ldw	r3,36(r2)
   10c48:	00a00034 	movhi	r2,32768
   10c4c:	10bfff04 	addi	r2,r2,-4
   10c50:	10c00536 	bltu	r2,r3,10c68 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10c54:	e0bff917 	ldw	r2,-28(fp)
   10c58:	10800917 	ldw	r2,36(r2)
   10c5c:	10c00044 	addi	r3,r2,1
   10c60:	e0bff917 	ldw	r2,-28(fp)
   10c64:	10c00915 	stw	r3,36(r2)
   10c68:	d0a4d517 	ldw	r2,-27820(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10c6c:	e037883a 	mov	sp,fp
   10c70:	df000017 	ldw	fp,0(sp)
   10c74:	dec00104 	addi	sp,sp,4
   10c78:	f800283a 	ret

00010c7c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10c7c:	defffd04 	addi	sp,sp,-12
   10c80:	df000215 	stw	fp,8(sp)
   10c84:	df000204 	addi	fp,sp,8
   10c88:	e13ffe15 	stw	r4,-8(fp)
   10c8c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10c90:	00000506 	br	10ca8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10c94:	e0bfff17 	ldw	r2,-4(fp)
   10c98:	1090000c 	andi	r2,r2,16384
   10c9c:	10000226 	beq	r2,zero,10ca8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10ca0:	00bffd44 	movi	r2,-11
   10ca4:	00000b06 	br	10cd4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10ca8:	e0bffe17 	ldw	r2,-8(fp)
   10cac:	10c00d17 	ldw	r3,52(r2)
   10cb0:	e0bffe17 	ldw	r2,-8(fp)
   10cb4:	10800c17 	ldw	r2,48(r2)
   10cb8:	18800526 	beq	r3,r2,10cd0 <altera_avalon_jtag_uart_close+0x54>
   10cbc:	e0bffe17 	ldw	r2,-8(fp)
   10cc0:	10c00917 	ldw	r3,36(r2)
   10cc4:	e0bffe17 	ldw	r2,-8(fp)
   10cc8:	10800117 	ldw	r2,4(r2)
   10ccc:	18bff136 	bltu	r3,r2,10c94 <__alt_data_end+0xffff5114>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10cd0:	0005883a 	mov	r2,zero
}
   10cd4:	e037883a 	mov	sp,fp
   10cd8:	df000017 	ldw	fp,0(sp)
   10cdc:	dec00104 	addi	sp,sp,4
   10ce0:	f800283a 	ret

00010ce4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10ce4:	defffa04 	addi	sp,sp,-24
   10ce8:	df000515 	stw	fp,20(sp)
   10cec:	df000504 	addi	fp,sp,20
   10cf0:	e13ffd15 	stw	r4,-12(fp)
   10cf4:	e17ffe15 	stw	r5,-8(fp)
   10cf8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10cfc:	00bff9c4 	movi	r2,-25
   10d00:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10d04:	e0bffe17 	ldw	r2,-8(fp)
   10d08:	10da8060 	cmpeqi	r3,r2,27137
   10d0c:	1800031e 	bne	r3,zero,10d1c <altera_avalon_jtag_uart_ioctl+0x38>
   10d10:	109a80a0 	cmpeqi	r2,r2,27138
   10d14:	1000181e 	bne	r2,zero,10d78 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   10d18:	00002906 	br	10dc0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10d1c:	e0bffd17 	ldw	r2,-12(fp)
   10d20:	10c00117 	ldw	r3,4(r2)
   10d24:	00a00034 	movhi	r2,32768
   10d28:	10bfffc4 	addi	r2,r2,-1
   10d2c:	18802126 	beq	r3,r2,10db4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   10d30:	e0bfff17 	ldw	r2,-4(fp)
   10d34:	10800017 	ldw	r2,0(r2)
   10d38:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10d3c:	e0bffc17 	ldw	r2,-16(fp)
   10d40:	10800090 	cmplti	r2,r2,2
   10d44:	1000061e 	bne	r2,zero,10d60 <altera_avalon_jtag_uart_ioctl+0x7c>
   10d48:	e0fffc17 	ldw	r3,-16(fp)
   10d4c:	00a00034 	movhi	r2,32768
   10d50:	10bfffc4 	addi	r2,r2,-1
   10d54:	18800226 	beq	r3,r2,10d60 <altera_avalon_jtag_uart_ioctl+0x7c>
   10d58:	e0bffc17 	ldw	r2,-16(fp)
   10d5c:	00000206 	br	10d68 <altera_avalon_jtag_uart_ioctl+0x84>
   10d60:	00a00034 	movhi	r2,32768
   10d64:	10bfff84 	addi	r2,r2,-2
   10d68:	e0fffd17 	ldw	r3,-12(fp)
   10d6c:	18800115 	stw	r2,4(r3)
      rc = 0;
   10d70:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10d74:	00000f06 	br	10db4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10d78:	e0bffd17 	ldw	r2,-12(fp)
   10d7c:	10c00117 	ldw	r3,4(r2)
   10d80:	00a00034 	movhi	r2,32768
   10d84:	10bfffc4 	addi	r2,r2,-1
   10d88:	18800c26 	beq	r3,r2,10dbc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10d8c:	e0bffd17 	ldw	r2,-12(fp)
   10d90:	10c00917 	ldw	r3,36(r2)
   10d94:	e0bffd17 	ldw	r2,-12(fp)
   10d98:	10800117 	ldw	r2,4(r2)
   10d9c:	1885803a 	cmpltu	r2,r3,r2
   10da0:	10c03fcc 	andi	r3,r2,255
   10da4:	e0bfff17 	ldw	r2,-4(fp)
   10da8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10dac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10db0:	00000206 	br	10dbc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10db4:	0001883a 	nop
   10db8:	00000106 	br	10dc0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10dbc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10dc0:	e0bffb17 	ldw	r2,-20(fp)
}
   10dc4:	e037883a 	mov	sp,fp
   10dc8:	df000017 	ldw	fp,0(sp)
   10dcc:	dec00104 	addi	sp,sp,4
   10dd0:	f800283a 	ret

00010dd4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10dd4:	defff304 	addi	sp,sp,-52
   10dd8:	dfc00c15 	stw	ra,48(sp)
   10ddc:	df000b15 	stw	fp,44(sp)
   10de0:	df000b04 	addi	fp,sp,44
   10de4:	e13ffc15 	stw	r4,-16(fp)
   10de8:	e17ffd15 	stw	r5,-12(fp)
   10dec:	e1bffe15 	stw	r6,-8(fp)
   10df0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10df4:	e0bffd17 	ldw	r2,-12(fp)
   10df8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10dfc:	00004706 	br	10f1c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10e00:	e0bffc17 	ldw	r2,-16(fp)
   10e04:	10800a17 	ldw	r2,40(r2)
   10e08:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10e0c:	e0bffc17 	ldw	r2,-16(fp)
   10e10:	10800b17 	ldw	r2,44(r2)
   10e14:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10e18:	e0fff717 	ldw	r3,-36(fp)
   10e1c:	e0bff817 	ldw	r2,-32(fp)
   10e20:	18800536 	bltu	r3,r2,10e38 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10e24:	e0fff717 	ldw	r3,-36(fp)
   10e28:	e0bff817 	ldw	r2,-32(fp)
   10e2c:	1885c83a 	sub	r2,r3,r2
   10e30:	e0bff615 	stw	r2,-40(fp)
   10e34:	00000406 	br	10e48 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10e38:	00c20004 	movi	r3,2048
   10e3c:	e0bff817 	ldw	r2,-32(fp)
   10e40:	1885c83a 	sub	r2,r3,r2
   10e44:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10e48:	e0bff617 	ldw	r2,-40(fp)
   10e4c:	10001e26 	beq	r2,zero,10ec8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   10e50:	e0fffe17 	ldw	r3,-8(fp)
   10e54:	e0bff617 	ldw	r2,-40(fp)
   10e58:	1880022e 	bgeu	r3,r2,10e64 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   10e5c:	e0bffe17 	ldw	r2,-8(fp)
   10e60:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10e64:	e0bffc17 	ldw	r2,-16(fp)
   10e68:	10c00e04 	addi	r3,r2,56
   10e6c:	e0bff817 	ldw	r2,-32(fp)
   10e70:	1885883a 	add	r2,r3,r2
   10e74:	e1bff617 	ldw	r6,-40(fp)
   10e78:	100b883a 	mov	r5,r2
   10e7c:	e13ff517 	ldw	r4,-44(fp)
   10e80:	00121b80 	call	121b8 <memcpy>
      ptr   += n;
   10e84:	e0fff517 	ldw	r3,-44(fp)
   10e88:	e0bff617 	ldw	r2,-40(fp)
   10e8c:	1885883a 	add	r2,r3,r2
   10e90:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10e94:	e0fffe17 	ldw	r3,-8(fp)
   10e98:	e0bff617 	ldw	r2,-40(fp)
   10e9c:	1885c83a 	sub	r2,r3,r2
   10ea0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10ea4:	e0fff817 	ldw	r3,-32(fp)
   10ea8:	e0bff617 	ldw	r2,-40(fp)
   10eac:	1885883a 	add	r2,r3,r2
   10eb0:	10c1ffcc 	andi	r3,r2,2047
   10eb4:	e0bffc17 	ldw	r2,-16(fp)
   10eb8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10ebc:	e0bffe17 	ldw	r2,-8(fp)
   10ec0:	00bfcf16 	blt	zero,r2,10e00 <__alt_data_end+0xffff5280>
   10ec4:	00000106 	br	10ecc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10ec8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10ecc:	e0fff517 	ldw	r3,-44(fp)
   10ed0:	e0bffd17 	ldw	r2,-12(fp)
   10ed4:	1880141e 	bne	r3,r2,10f28 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10ed8:	e0bfff17 	ldw	r2,-4(fp)
   10edc:	1090000c 	andi	r2,r2,16384
   10ee0:	1000131e 	bne	r2,zero,10f30 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10ee4:	0001883a 	nop
   10ee8:	e0bffc17 	ldw	r2,-16(fp)
   10eec:	10c00a17 	ldw	r3,40(r2)
   10ef0:	e0bff717 	ldw	r2,-36(fp)
   10ef4:	1880051e 	bne	r3,r2,10f0c <altera_avalon_jtag_uart_read+0x138>
   10ef8:	e0bffc17 	ldw	r2,-16(fp)
   10efc:	10c00917 	ldw	r3,36(r2)
   10f00:	e0bffc17 	ldw	r2,-16(fp)
   10f04:	10800117 	ldw	r2,4(r2)
   10f08:	18bff736 	bltu	r3,r2,10ee8 <__alt_data_end+0xffff5368>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10f0c:	e0bffc17 	ldw	r2,-16(fp)
   10f10:	10c00a17 	ldw	r3,40(r2)
   10f14:	e0bff717 	ldw	r2,-36(fp)
   10f18:	18800726 	beq	r3,r2,10f38 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10f1c:	e0bffe17 	ldw	r2,-8(fp)
   10f20:	00bfb716 	blt	zero,r2,10e00 <__alt_data_end+0xffff5280>
   10f24:	00000506 	br	10f3c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   10f28:	0001883a 	nop
   10f2c:	00000306 	br	10f3c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   10f30:	0001883a 	nop
   10f34:	00000106 	br	10f3c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   10f38:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10f3c:	e0fff517 	ldw	r3,-44(fp)
   10f40:	e0bffd17 	ldw	r2,-12(fp)
   10f44:	18801826 	beq	r3,r2,10fa8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f48:	0005303a 	rdctl	r2,status
   10f4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f50:	e0fffb17 	ldw	r3,-20(fp)
   10f54:	00bfff84 	movi	r2,-2
   10f58:	1884703a 	and	r2,r3,r2
   10f5c:	1001703a 	wrctl	status,r2
  
  return context;
   10f60:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10f64:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10f68:	e0bffc17 	ldw	r2,-16(fp)
   10f6c:	10800817 	ldw	r2,32(r2)
   10f70:	10c00054 	ori	r3,r2,1
   10f74:	e0bffc17 	ldw	r2,-16(fp)
   10f78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10f7c:	e0bffc17 	ldw	r2,-16(fp)
   10f80:	10800017 	ldw	r2,0(r2)
   10f84:	10800104 	addi	r2,r2,4
   10f88:	1007883a 	mov	r3,r2
   10f8c:	e0bffc17 	ldw	r2,-16(fp)
   10f90:	10800817 	ldw	r2,32(r2)
   10f94:	18800035 	stwio	r2,0(r3)
   10f98:	e0bffa17 	ldw	r2,-24(fp)
   10f9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10fa0:	e0bff917 	ldw	r2,-28(fp)
   10fa4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10fa8:	e0fff517 	ldw	r3,-44(fp)
   10fac:	e0bffd17 	ldw	r2,-12(fp)
   10fb0:	18800426 	beq	r3,r2,10fc4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10fb4:	e0fff517 	ldw	r3,-44(fp)
   10fb8:	e0bffd17 	ldw	r2,-12(fp)
   10fbc:	1885c83a 	sub	r2,r3,r2
   10fc0:	00000606 	br	10fdc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10fc4:	e0bfff17 	ldw	r2,-4(fp)
   10fc8:	1090000c 	andi	r2,r2,16384
   10fcc:	10000226 	beq	r2,zero,10fd8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   10fd0:	00bffd44 	movi	r2,-11
   10fd4:	00000106 	br	10fdc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   10fd8:	00bffec4 	movi	r2,-5
}
   10fdc:	e037883a 	mov	sp,fp
   10fe0:	dfc00117 	ldw	ra,4(sp)
   10fe4:	df000017 	ldw	fp,0(sp)
   10fe8:	dec00204 	addi	sp,sp,8
   10fec:	f800283a 	ret

00010ff0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10ff0:	defff304 	addi	sp,sp,-52
   10ff4:	dfc00c15 	stw	ra,48(sp)
   10ff8:	df000b15 	stw	fp,44(sp)
   10ffc:	df000b04 	addi	fp,sp,44
   11000:	e13ffc15 	stw	r4,-16(fp)
   11004:	e17ffd15 	stw	r5,-12(fp)
   11008:	e1bffe15 	stw	r6,-8(fp)
   1100c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   11010:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   11014:	e0bffd17 	ldw	r2,-12(fp)
   11018:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1101c:	00003706 	br	110fc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   11020:	e0bffc17 	ldw	r2,-16(fp)
   11024:	10800c17 	ldw	r2,48(r2)
   11028:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   1102c:	e0bffc17 	ldw	r2,-16(fp)
   11030:	10800d17 	ldw	r2,52(r2)
   11034:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   11038:	e0fff917 	ldw	r3,-28(fp)
   1103c:	e0bff517 	ldw	r2,-44(fp)
   11040:	1880062e 	bgeu	r3,r2,1105c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   11044:	e0fff517 	ldw	r3,-44(fp)
   11048:	e0bff917 	ldw	r2,-28(fp)
   1104c:	1885c83a 	sub	r2,r3,r2
   11050:	10bfffc4 	addi	r2,r2,-1
   11054:	e0bff615 	stw	r2,-40(fp)
   11058:	00000b06 	br	11088 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1105c:	e0bff517 	ldw	r2,-44(fp)
   11060:	10000526 	beq	r2,zero,11078 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   11064:	00c20004 	movi	r3,2048
   11068:	e0bff917 	ldw	r2,-28(fp)
   1106c:	1885c83a 	sub	r2,r3,r2
   11070:	e0bff615 	stw	r2,-40(fp)
   11074:	00000406 	br	11088 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   11078:	00c1ffc4 	movi	r3,2047
   1107c:	e0bff917 	ldw	r2,-28(fp)
   11080:	1885c83a 	sub	r2,r3,r2
   11084:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11088:	e0bff617 	ldw	r2,-40(fp)
   1108c:	10001e26 	beq	r2,zero,11108 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   11090:	e0fffe17 	ldw	r3,-8(fp)
   11094:	e0bff617 	ldw	r2,-40(fp)
   11098:	1880022e 	bgeu	r3,r2,110a4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1109c:	e0bffe17 	ldw	r2,-8(fp)
   110a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   110a4:	e0bffc17 	ldw	r2,-16(fp)
   110a8:	10c20e04 	addi	r3,r2,2104
   110ac:	e0bff917 	ldw	r2,-28(fp)
   110b0:	1885883a 	add	r2,r3,r2
   110b4:	e1bff617 	ldw	r6,-40(fp)
   110b8:	e17ffd17 	ldw	r5,-12(fp)
   110bc:	1009883a 	mov	r4,r2
   110c0:	00121b80 	call	121b8 <memcpy>
      ptr   += n;
   110c4:	e0fffd17 	ldw	r3,-12(fp)
   110c8:	e0bff617 	ldw	r2,-40(fp)
   110cc:	1885883a 	add	r2,r3,r2
   110d0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   110d4:	e0fffe17 	ldw	r3,-8(fp)
   110d8:	e0bff617 	ldw	r2,-40(fp)
   110dc:	1885c83a 	sub	r2,r3,r2
   110e0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   110e4:	e0fff917 	ldw	r3,-28(fp)
   110e8:	e0bff617 	ldw	r2,-40(fp)
   110ec:	1885883a 	add	r2,r3,r2
   110f0:	10c1ffcc 	andi	r3,r2,2047
   110f4:	e0bffc17 	ldw	r2,-16(fp)
   110f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   110fc:	e0bffe17 	ldw	r2,-8(fp)
   11100:	00bfc716 	blt	zero,r2,11020 <__alt_data_end+0xffff54a0>
   11104:	00000106 	br	1110c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   11108:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1110c:	0005303a 	rdctl	r2,status
   11110:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11114:	e0fffb17 	ldw	r3,-20(fp)
   11118:	00bfff84 	movi	r2,-2
   1111c:	1884703a 	and	r2,r3,r2
   11120:	1001703a 	wrctl	status,r2
  
  return context;
   11124:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11128:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1112c:	e0bffc17 	ldw	r2,-16(fp)
   11130:	10800817 	ldw	r2,32(r2)
   11134:	10c00094 	ori	r3,r2,2
   11138:	e0bffc17 	ldw	r2,-16(fp)
   1113c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11140:	e0bffc17 	ldw	r2,-16(fp)
   11144:	10800017 	ldw	r2,0(r2)
   11148:	10800104 	addi	r2,r2,4
   1114c:	1007883a 	mov	r3,r2
   11150:	e0bffc17 	ldw	r2,-16(fp)
   11154:	10800817 	ldw	r2,32(r2)
   11158:	18800035 	stwio	r2,0(r3)
   1115c:	e0bffa17 	ldw	r2,-24(fp)
   11160:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11164:	e0bff817 	ldw	r2,-32(fp)
   11168:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1116c:	e0bffe17 	ldw	r2,-8(fp)
   11170:	0080100e 	bge	zero,r2,111b4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   11174:	e0bfff17 	ldw	r2,-4(fp)
   11178:	1090000c 	andi	r2,r2,16384
   1117c:	1000101e 	bne	r2,zero,111c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   11180:	0001883a 	nop
   11184:	e0bffc17 	ldw	r2,-16(fp)
   11188:	10c00d17 	ldw	r3,52(r2)
   1118c:	e0bff517 	ldw	r2,-44(fp)
   11190:	1880051e 	bne	r3,r2,111a8 <altera_avalon_jtag_uart_write+0x1b8>
   11194:	e0bffc17 	ldw	r2,-16(fp)
   11198:	10c00917 	ldw	r3,36(r2)
   1119c:	e0bffc17 	ldw	r2,-16(fp)
   111a0:	10800117 	ldw	r2,4(r2)
   111a4:	18bff736 	bltu	r3,r2,11184 <__alt_data_end+0xffff5604>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   111a8:	e0bffc17 	ldw	r2,-16(fp)
   111ac:	10800917 	ldw	r2,36(r2)
   111b0:	1000051e 	bne	r2,zero,111c8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   111b4:	e0bffe17 	ldw	r2,-8(fp)
   111b8:	00bfd016 	blt	zero,r2,110fc <__alt_data_end+0xffff557c>
   111bc:	00000306 	br	111cc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   111c0:	0001883a 	nop
   111c4:	00000106 	br	111cc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   111c8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   111cc:	e0fffd17 	ldw	r3,-12(fp)
   111d0:	e0bff717 	ldw	r2,-36(fp)
   111d4:	18800426 	beq	r3,r2,111e8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   111d8:	e0fffd17 	ldw	r3,-12(fp)
   111dc:	e0bff717 	ldw	r2,-36(fp)
   111e0:	1885c83a 	sub	r2,r3,r2
   111e4:	00000606 	br	11200 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   111e8:	e0bfff17 	ldw	r2,-4(fp)
   111ec:	1090000c 	andi	r2,r2,16384
   111f0:	10000226 	beq	r2,zero,111fc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   111f4:	00bffd44 	movi	r2,-11
   111f8:	00000106 	br	11200 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   111fc:	00bffec4 	movi	r2,-5
}
   11200:	e037883a 	mov	sp,fp
   11204:	dfc00117 	ldw	ra,4(sp)
   11208:	df000017 	ldw	fp,0(sp)
   1120c:	dec00204 	addi	sp,sp,8
   11210:	f800283a 	ret

00011214 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11214:	defff504 	addi	sp,sp,-44
   11218:	df000a15 	stw	fp,40(sp)
   1121c:	df000a04 	addi	fp,sp,40
   11220:	e13ffc15 	stw	r4,-16(fp)
   11224:	e17ffd15 	stw	r5,-12(fp)
   11228:	e1bffe15 	stw	r6,-8(fp)
   1122c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11230:	e03ff615 	stw	zero,-40(fp)
   11234:	d0a4d517 	ldw	r2,-27820(gp)
  
  if (alt_ticks_per_second ())
   11238:	10003c26 	beq	r2,zero,1132c <alt_alarm_start+0x118>
  {
    if (alarm)
   1123c:	e0bffc17 	ldw	r2,-16(fp)
   11240:	10003826 	beq	r2,zero,11324 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   11244:	e0bffc17 	ldw	r2,-16(fp)
   11248:	e0fffe17 	ldw	r3,-8(fp)
   1124c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   11250:	e0bffc17 	ldw	r2,-16(fp)
   11254:	e0ffff17 	ldw	r3,-4(fp)
   11258:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1125c:	0005303a 	rdctl	r2,status
   11260:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11264:	e0fff917 	ldw	r3,-28(fp)
   11268:	00bfff84 	movi	r2,-2
   1126c:	1884703a 	and	r2,r3,r2
   11270:	1001703a 	wrctl	status,r2
  
  return context;
   11274:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   11278:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1127c:	d0a4d617 	ldw	r2,-27816(gp)
      
      current_nticks = alt_nticks();
   11280:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11284:	e0fffd17 	ldw	r3,-12(fp)
   11288:	e0bff617 	ldw	r2,-40(fp)
   1128c:	1885883a 	add	r2,r3,r2
   11290:	10c00044 	addi	r3,r2,1
   11294:	e0bffc17 	ldw	r2,-16(fp)
   11298:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1129c:	e0bffc17 	ldw	r2,-16(fp)
   112a0:	10c00217 	ldw	r3,8(r2)
   112a4:	e0bff617 	ldw	r2,-40(fp)
   112a8:	1880042e 	bgeu	r3,r2,112bc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   112ac:	e0bffc17 	ldw	r2,-16(fp)
   112b0:	00c00044 	movi	r3,1
   112b4:	10c00405 	stb	r3,16(r2)
   112b8:	00000206 	br	112c4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   112bc:	e0bffc17 	ldw	r2,-16(fp)
   112c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   112c4:	e0bffc17 	ldw	r2,-16(fp)
   112c8:	d0e00904 	addi	r3,gp,-32732
   112cc:	e0fffa15 	stw	r3,-24(fp)
   112d0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   112d4:	e0bffb17 	ldw	r2,-20(fp)
   112d8:	e0fffa17 	ldw	r3,-24(fp)
   112dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   112e0:	e0bffa17 	ldw	r2,-24(fp)
   112e4:	10c00017 	ldw	r3,0(r2)
   112e8:	e0bffb17 	ldw	r2,-20(fp)
   112ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   112f0:	e0bffa17 	ldw	r2,-24(fp)
   112f4:	10800017 	ldw	r2,0(r2)
   112f8:	e0fffb17 	ldw	r3,-20(fp)
   112fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11300:	e0bffa17 	ldw	r2,-24(fp)
   11304:	e0fffb17 	ldw	r3,-20(fp)
   11308:	10c00015 	stw	r3,0(r2)
   1130c:	e0bff817 	ldw	r2,-32(fp)
   11310:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11314:	e0bff717 	ldw	r2,-36(fp)
   11318:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1131c:	0005883a 	mov	r2,zero
   11320:	00000306 	br	11330 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   11324:	00bffa84 	movi	r2,-22
   11328:	00000106 	br	11330 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1132c:	00bfde84 	movi	r2,-134
  }
}
   11330:	e037883a 	mov	sp,fp
   11334:	df000017 	ldw	fp,0(sp)
   11338:	dec00104 	addi	sp,sp,4
   1133c:	f800283a 	ret

00011340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11340:	defffe04 	addi	sp,sp,-8
   11344:	dfc00115 	stw	ra,4(sp)
   11348:	df000015 	stw	fp,0(sp)
   1134c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11350:	d0a00717 	ldw	r2,-32740(gp)
   11354:	10000326 	beq	r2,zero,11364 <alt_get_errno+0x24>
   11358:	d0a00717 	ldw	r2,-32740(gp)
   1135c:	103ee83a 	callr	r2
   11360:	00000106 	br	11368 <alt_get_errno+0x28>
   11364:	d0a4d004 	addi	r2,gp,-27840
}
   11368:	e037883a 	mov	sp,fp
   1136c:	dfc00117 	ldw	ra,4(sp)
   11370:	df000017 	ldw	fp,0(sp)
   11374:	dec00204 	addi	sp,sp,8
   11378:	f800283a 	ret

0001137c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1137c:	defffb04 	addi	sp,sp,-20
   11380:	dfc00415 	stw	ra,16(sp)
   11384:	df000315 	stw	fp,12(sp)
   11388:	df000304 	addi	fp,sp,12
   1138c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11390:	e0bfff17 	ldw	r2,-4(fp)
   11394:	10000816 	blt	r2,zero,113b8 <close+0x3c>
   11398:	01400304 	movi	r5,12
   1139c:	e13fff17 	ldw	r4,-4(fp)
   113a0:	00123700 	call	12370 <__mulsi3>
   113a4:	1007883a 	mov	r3,r2
   113a8:	00800074 	movhi	r2,1
   113ac:	108d6004 	addi	r2,r2,13696
   113b0:	1885883a 	add	r2,r3,r2
   113b4:	00000106 	br	113bc <close+0x40>
   113b8:	0005883a 	mov	r2,zero
   113bc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   113c0:	e0bffd17 	ldw	r2,-12(fp)
   113c4:	10001926 	beq	r2,zero,1142c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   113c8:	e0bffd17 	ldw	r2,-12(fp)
   113cc:	10800017 	ldw	r2,0(r2)
   113d0:	10800417 	ldw	r2,16(r2)
   113d4:	10000626 	beq	r2,zero,113f0 <close+0x74>
   113d8:	e0bffd17 	ldw	r2,-12(fp)
   113dc:	10800017 	ldw	r2,0(r2)
   113e0:	10800417 	ldw	r2,16(r2)
   113e4:	e13ffd17 	ldw	r4,-12(fp)
   113e8:	103ee83a 	callr	r2
   113ec:	00000106 	br	113f4 <close+0x78>
   113f0:	0005883a 	mov	r2,zero
   113f4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   113f8:	e13fff17 	ldw	r4,-4(fp)
   113fc:	0011c240 	call	11c24 <alt_release_fd>
    if (rval < 0)
   11400:	e0bffe17 	ldw	r2,-8(fp)
   11404:	1000070e 	bge	r2,zero,11424 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11408:	00113400 	call	11340 <alt_get_errno>
   1140c:	1007883a 	mov	r3,r2
   11410:	e0bffe17 	ldw	r2,-8(fp)
   11414:	0085c83a 	sub	r2,zero,r2
   11418:	18800015 	stw	r2,0(r3)
      return -1;
   1141c:	00bfffc4 	movi	r2,-1
   11420:	00000706 	br	11440 <close+0xc4>
    }
    return 0;
   11424:	0005883a 	mov	r2,zero
   11428:	00000506 	br	11440 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1142c:	00113400 	call	11340 <alt_get_errno>
   11430:	1007883a 	mov	r3,r2
   11434:	00801444 	movi	r2,81
   11438:	18800015 	stw	r2,0(r3)
    return -1;
   1143c:	00bfffc4 	movi	r2,-1
  }
}
   11440:	e037883a 	mov	sp,fp
   11444:	dfc00117 	ldw	ra,4(sp)
   11448:	df000017 	ldw	fp,0(sp)
   1144c:	dec00204 	addi	sp,sp,8
   11450:	f800283a 	ret

00011454 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11454:	deffff04 	addi	sp,sp,-4
   11458:	df000015 	stw	fp,0(sp)
   1145c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11460:	0001883a 	nop
   11464:	e037883a 	mov	sp,fp
   11468:	df000017 	ldw	fp,0(sp)
   1146c:	dec00104 	addi	sp,sp,4
   11470:	f800283a 	ret

00011474 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11474:	defffc04 	addi	sp,sp,-16
   11478:	df000315 	stw	fp,12(sp)
   1147c:	df000304 	addi	fp,sp,12
   11480:	e13ffd15 	stw	r4,-12(fp)
   11484:	e17ffe15 	stw	r5,-8(fp)
   11488:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1148c:	e0bfff17 	ldw	r2,-4(fp)
}
   11490:	e037883a 	mov	sp,fp
   11494:	df000017 	ldw	fp,0(sp)
   11498:	dec00104 	addi	sp,sp,4
   1149c:	f800283a 	ret

000114a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   114a0:	defffe04 	addi	sp,sp,-8
   114a4:	dfc00115 	stw	ra,4(sp)
   114a8:	df000015 	stw	fp,0(sp)
   114ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   114b0:	d0a00717 	ldw	r2,-32740(gp)
   114b4:	10000326 	beq	r2,zero,114c4 <alt_get_errno+0x24>
   114b8:	d0a00717 	ldw	r2,-32740(gp)
   114bc:	103ee83a 	callr	r2
   114c0:	00000106 	br	114c8 <alt_get_errno+0x28>
   114c4:	d0a4d004 	addi	r2,gp,-27840
}
   114c8:	e037883a 	mov	sp,fp
   114cc:	dfc00117 	ldw	ra,4(sp)
   114d0:	df000017 	ldw	fp,0(sp)
   114d4:	dec00204 	addi	sp,sp,8
   114d8:	f800283a 	ret

000114dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   114dc:	defffa04 	addi	sp,sp,-24
   114e0:	dfc00515 	stw	ra,20(sp)
   114e4:	df000415 	stw	fp,16(sp)
   114e8:	df000404 	addi	fp,sp,16
   114ec:	e13ffe15 	stw	r4,-8(fp)
   114f0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   114f4:	e0bffe17 	ldw	r2,-8(fp)
   114f8:	10000326 	beq	r2,zero,11508 <alt_dev_llist_insert+0x2c>
   114fc:	e0bffe17 	ldw	r2,-8(fp)
   11500:	10800217 	ldw	r2,8(r2)
   11504:	1000061e 	bne	r2,zero,11520 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11508:	00114a00 	call	114a0 <alt_get_errno>
   1150c:	1007883a 	mov	r3,r2
   11510:	00800584 	movi	r2,22
   11514:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11518:	00bffa84 	movi	r2,-22
   1151c:	00001306 	br	1156c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11520:	e0bffe17 	ldw	r2,-8(fp)
   11524:	e0ffff17 	ldw	r3,-4(fp)
   11528:	e0fffc15 	stw	r3,-16(fp)
   1152c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11530:	e0bffd17 	ldw	r2,-12(fp)
   11534:	e0fffc17 	ldw	r3,-16(fp)
   11538:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1153c:	e0bffc17 	ldw	r2,-16(fp)
   11540:	10c00017 	ldw	r3,0(r2)
   11544:	e0bffd17 	ldw	r2,-12(fp)
   11548:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1154c:	e0bffc17 	ldw	r2,-16(fp)
   11550:	10800017 	ldw	r2,0(r2)
   11554:	e0fffd17 	ldw	r3,-12(fp)
   11558:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1155c:	e0bffc17 	ldw	r2,-16(fp)
   11560:	e0fffd17 	ldw	r3,-12(fp)
   11564:	10c00015 	stw	r3,0(r2)

  return 0;  
   11568:	0005883a 	mov	r2,zero
}
   1156c:	e037883a 	mov	sp,fp
   11570:	dfc00117 	ldw	ra,4(sp)
   11574:	df000017 	ldw	fp,0(sp)
   11578:	dec00204 	addi	sp,sp,8
   1157c:	f800283a 	ret

00011580 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11580:	deffff04 	addi	sp,sp,-4
   11584:	df000015 	stw	fp,0(sp)
   11588:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1158c:	0001883a 	nop
   11590:	e037883a 	mov	sp,fp
   11594:	df000017 	ldw	fp,0(sp)
   11598:	dec00104 	addi	sp,sp,4
   1159c:	f800283a 	ret

000115a0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   115a0:	defff904 	addi	sp,sp,-28
   115a4:	dfc00615 	stw	ra,24(sp)
   115a8:	df000515 	stw	fp,20(sp)
   115ac:	df000504 	addi	fp,sp,20
   115b0:	e13ffc15 	stw	r4,-16(fp)
   115b4:	e17ffd15 	stw	r5,-12(fp)
   115b8:	e1bffe15 	stw	r6,-8(fp)
   115bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   115c0:	e0800217 	ldw	r2,8(fp)
   115c4:	d8800015 	stw	r2,0(sp)
   115c8:	e1ffff17 	ldw	r7,-4(fp)
   115cc:	e1bffe17 	ldw	r6,-8(fp)
   115d0:	e17ffd17 	ldw	r5,-12(fp)
   115d4:	e13ffc17 	ldw	r4,-16(fp)
   115d8:	00117500 	call	11750 <alt_iic_isr_register>
}  
   115dc:	e037883a 	mov	sp,fp
   115e0:	dfc00117 	ldw	ra,4(sp)
   115e4:	df000017 	ldw	fp,0(sp)
   115e8:	dec00204 	addi	sp,sp,8
   115ec:	f800283a 	ret

000115f0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   115f0:	defff904 	addi	sp,sp,-28
   115f4:	df000615 	stw	fp,24(sp)
   115f8:	df000604 	addi	fp,sp,24
   115fc:	e13ffe15 	stw	r4,-8(fp)
   11600:	e17fff15 	stw	r5,-4(fp)
   11604:	e0bfff17 	ldw	r2,-4(fp)
   11608:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1160c:	0005303a 	rdctl	r2,status
   11610:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11614:	e0fffb17 	ldw	r3,-20(fp)
   11618:	00bfff84 	movi	r2,-2
   1161c:	1884703a 	and	r2,r3,r2
   11620:	1001703a 	wrctl	status,r2
  
  return context;
   11624:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11628:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1162c:	00c00044 	movi	r3,1
   11630:	e0bffa17 	ldw	r2,-24(fp)
   11634:	1884983a 	sll	r2,r3,r2
   11638:	1007883a 	mov	r3,r2
   1163c:	d0a4d417 	ldw	r2,-27824(gp)
   11640:	1884b03a 	or	r2,r3,r2
   11644:	d0a4d415 	stw	r2,-27824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11648:	d0a4d417 	ldw	r2,-27824(gp)
   1164c:	100170fa 	wrctl	ienable,r2
   11650:	e0bffc17 	ldw	r2,-16(fp)
   11654:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11658:	e0bffd17 	ldw	r2,-12(fp)
   1165c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11660:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11664:	0001883a 	nop
}
   11668:	e037883a 	mov	sp,fp
   1166c:	df000017 	ldw	fp,0(sp)
   11670:	dec00104 	addi	sp,sp,4
   11674:	f800283a 	ret

00011678 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   11678:	defff904 	addi	sp,sp,-28
   1167c:	df000615 	stw	fp,24(sp)
   11680:	df000604 	addi	fp,sp,24
   11684:	e13ffe15 	stw	r4,-8(fp)
   11688:	e17fff15 	stw	r5,-4(fp)
   1168c:	e0bfff17 	ldw	r2,-4(fp)
   11690:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11694:	0005303a 	rdctl	r2,status
   11698:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1169c:	e0fffb17 	ldw	r3,-20(fp)
   116a0:	00bfff84 	movi	r2,-2
   116a4:	1884703a 	and	r2,r3,r2
   116a8:	1001703a 	wrctl	status,r2
  
  return context;
   116ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   116b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   116b4:	00c00044 	movi	r3,1
   116b8:	e0bffa17 	ldw	r2,-24(fp)
   116bc:	1884983a 	sll	r2,r3,r2
   116c0:	0084303a 	nor	r2,zero,r2
   116c4:	1007883a 	mov	r3,r2
   116c8:	d0a4d417 	ldw	r2,-27824(gp)
   116cc:	1884703a 	and	r2,r3,r2
   116d0:	d0a4d415 	stw	r2,-27824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   116d4:	d0a4d417 	ldw	r2,-27824(gp)
   116d8:	100170fa 	wrctl	ienable,r2
   116dc:	e0bffc17 	ldw	r2,-16(fp)
   116e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   116e4:	e0bffd17 	ldw	r2,-12(fp)
   116e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   116ec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   116f0:	0001883a 	nop
}
   116f4:	e037883a 	mov	sp,fp
   116f8:	df000017 	ldw	fp,0(sp)
   116fc:	dec00104 	addi	sp,sp,4
   11700:	f800283a 	ret

00011704 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11704:	defffc04 	addi	sp,sp,-16
   11708:	df000315 	stw	fp,12(sp)
   1170c:	df000304 	addi	fp,sp,12
   11710:	e13ffe15 	stw	r4,-8(fp)
   11714:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11718:	000530fa 	rdctl	r2,ienable
   1171c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11720:	00c00044 	movi	r3,1
   11724:	e0bfff17 	ldw	r2,-4(fp)
   11728:	1884983a 	sll	r2,r3,r2
   1172c:	1007883a 	mov	r3,r2
   11730:	e0bffd17 	ldw	r2,-12(fp)
   11734:	1884703a 	and	r2,r3,r2
   11738:	1004c03a 	cmpne	r2,r2,zero
   1173c:	10803fcc 	andi	r2,r2,255
}
   11740:	e037883a 	mov	sp,fp
   11744:	df000017 	ldw	fp,0(sp)
   11748:	dec00104 	addi	sp,sp,4
   1174c:	f800283a 	ret

00011750 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11750:	defff504 	addi	sp,sp,-44
   11754:	dfc00a15 	stw	ra,40(sp)
   11758:	df000915 	stw	fp,36(sp)
   1175c:	df000904 	addi	fp,sp,36
   11760:	e13ffc15 	stw	r4,-16(fp)
   11764:	e17ffd15 	stw	r5,-12(fp)
   11768:	e1bffe15 	stw	r6,-8(fp)
   1176c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11770:	00bffa84 	movi	r2,-22
   11774:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11778:	e0bffd17 	ldw	r2,-12(fp)
   1177c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11780:	e0bff817 	ldw	r2,-32(fp)
   11784:	10800808 	cmpgei	r2,r2,32
   11788:	1000271e 	bne	r2,zero,11828 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1178c:	0005303a 	rdctl	r2,status
   11790:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11794:	e0fffb17 	ldw	r3,-20(fp)
   11798:	00bfff84 	movi	r2,-2
   1179c:	1884703a 	and	r2,r3,r2
   117a0:	1001703a 	wrctl	status,r2
  
  return context;
   117a4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   117a8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   117ac:	00800074 	movhi	r2,1
   117b0:	10929804 	addi	r2,r2,19040
   117b4:	e0fff817 	ldw	r3,-32(fp)
   117b8:	180690fa 	slli	r3,r3,3
   117bc:	10c5883a 	add	r2,r2,r3
   117c0:	e0fffe17 	ldw	r3,-8(fp)
   117c4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   117c8:	00800074 	movhi	r2,1
   117cc:	10929804 	addi	r2,r2,19040
   117d0:	e0fff817 	ldw	r3,-32(fp)
   117d4:	180690fa 	slli	r3,r3,3
   117d8:	10c5883a 	add	r2,r2,r3
   117dc:	10800104 	addi	r2,r2,4
   117e0:	e0ffff17 	ldw	r3,-4(fp)
   117e4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   117e8:	e0bffe17 	ldw	r2,-8(fp)
   117ec:	10000526 	beq	r2,zero,11804 <alt_iic_isr_register+0xb4>
   117f0:	e0bff817 	ldw	r2,-32(fp)
   117f4:	100b883a 	mov	r5,r2
   117f8:	e13ffc17 	ldw	r4,-16(fp)
   117fc:	00115f00 	call	115f0 <alt_ic_irq_enable>
   11800:	00000406 	br	11814 <alt_iic_isr_register+0xc4>
   11804:	e0bff817 	ldw	r2,-32(fp)
   11808:	100b883a 	mov	r5,r2
   1180c:	e13ffc17 	ldw	r4,-16(fp)
   11810:	00116780 	call	11678 <alt_ic_irq_disable>
   11814:	e0bff715 	stw	r2,-36(fp)
   11818:	e0bffa17 	ldw	r2,-24(fp)
   1181c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11820:	e0bff917 	ldw	r2,-28(fp)
   11824:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11828:	e0bff717 	ldw	r2,-36(fp)
}
   1182c:	e037883a 	mov	sp,fp
   11830:	dfc00117 	ldw	ra,4(sp)
   11834:	df000017 	ldw	fp,0(sp)
   11838:	dec00204 	addi	sp,sp,8
   1183c:	f800283a 	ret

00011840 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11840:	defff804 	addi	sp,sp,-32
   11844:	dfc00715 	stw	ra,28(sp)
   11848:	df000615 	stw	fp,24(sp)
   1184c:	dc000515 	stw	r16,20(sp)
   11850:	df000604 	addi	fp,sp,24
   11854:	e13ffb15 	stw	r4,-20(fp)
   11858:	e17ffc15 	stw	r5,-16(fp)
   1185c:	e1bffd15 	stw	r6,-12(fp)
   11860:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   11864:	e1bffe17 	ldw	r6,-8(fp)
   11868:	e17ffd17 	ldw	r5,-12(fp)
   1186c:	e13ffc17 	ldw	r4,-16(fp)
   11870:	0011ac80 	call	11ac8 <open>
   11874:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   11878:	e0bffa17 	ldw	r2,-24(fp)
   1187c:	10002216 	blt	r2,zero,11908 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   11880:	04000074 	movhi	r16,1
   11884:	840d6004 	addi	r16,r16,13696
   11888:	e0bffa17 	ldw	r2,-24(fp)
   1188c:	01400304 	movi	r5,12
   11890:	1009883a 	mov	r4,r2
   11894:	00123700 	call	12370 <__mulsi3>
   11898:	8085883a 	add	r2,r16,r2
   1189c:	10c00017 	ldw	r3,0(r2)
   118a0:	e0bffb17 	ldw	r2,-20(fp)
   118a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   118a8:	04000074 	movhi	r16,1
   118ac:	840d6004 	addi	r16,r16,13696
   118b0:	e0bffa17 	ldw	r2,-24(fp)
   118b4:	01400304 	movi	r5,12
   118b8:	1009883a 	mov	r4,r2
   118bc:	00123700 	call	12370 <__mulsi3>
   118c0:	8085883a 	add	r2,r16,r2
   118c4:	10800104 	addi	r2,r2,4
   118c8:	10c00017 	ldw	r3,0(r2)
   118cc:	e0bffb17 	ldw	r2,-20(fp)
   118d0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   118d4:	04000074 	movhi	r16,1
   118d8:	840d6004 	addi	r16,r16,13696
   118dc:	e0bffa17 	ldw	r2,-24(fp)
   118e0:	01400304 	movi	r5,12
   118e4:	1009883a 	mov	r4,r2
   118e8:	00123700 	call	12370 <__mulsi3>
   118ec:	8085883a 	add	r2,r16,r2
   118f0:	10800204 	addi	r2,r2,8
   118f4:	10c00017 	ldw	r3,0(r2)
   118f8:	e0bffb17 	ldw	r2,-20(fp)
   118fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11900:	e13ffa17 	ldw	r4,-24(fp)
   11904:	0011c240 	call	11c24 <alt_release_fd>
  }
} 
   11908:	0001883a 	nop
   1190c:	e6ffff04 	addi	sp,fp,-4
   11910:	dfc00217 	ldw	ra,8(sp)
   11914:	df000117 	ldw	fp,4(sp)
   11918:	dc000017 	ldw	r16,0(sp)
   1191c:	dec00304 	addi	sp,sp,12
   11920:	f800283a 	ret

00011924 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11924:	defffb04 	addi	sp,sp,-20
   11928:	dfc00415 	stw	ra,16(sp)
   1192c:	df000315 	stw	fp,12(sp)
   11930:	df000304 	addi	fp,sp,12
   11934:	e13ffd15 	stw	r4,-12(fp)
   11938:	e17ffe15 	stw	r5,-8(fp)
   1193c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11940:	01c07fc4 	movi	r7,511
   11944:	01800044 	movi	r6,1
   11948:	e17ffd17 	ldw	r5,-12(fp)
   1194c:	01000074 	movhi	r4,1
   11950:	210d6304 	addi	r4,r4,13708
   11954:	00118400 	call	11840 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11958:	01c07fc4 	movi	r7,511
   1195c:	000d883a 	mov	r6,zero
   11960:	e17ffe17 	ldw	r5,-8(fp)
   11964:	01000074 	movhi	r4,1
   11968:	210d6004 	addi	r4,r4,13696
   1196c:	00118400 	call	11840 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11970:	01c07fc4 	movi	r7,511
   11974:	01800044 	movi	r6,1
   11978:	e17fff17 	ldw	r5,-4(fp)
   1197c:	01000074 	movhi	r4,1
   11980:	210d6604 	addi	r4,r4,13720
   11984:	00118400 	call	11840 <alt_open_fd>
}  
   11988:	0001883a 	nop
   1198c:	e037883a 	mov	sp,fp
   11990:	dfc00117 	ldw	ra,4(sp)
   11994:	df000017 	ldw	fp,0(sp)
   11998:	dec00204 	addi	sp,sp,8
   1199c:	f800283a 	ret

000119a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   119a0:	defffe04 	addi	sp,sp,-8
   119a4:	dfc00115 	stw	ra,4(sp)
   119a8:	df000015 	stw	fp,0(sp)
   119ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   119b0:	d0a00717 	ldw	r2,-32740(gp)
   119b4:	10000326 	beq	r2,zero,119c4 <alt_get_errno+0x24>
   119b8:	d0a00717 	ldw	r2,-32740(gp)
   119bc:	103ee83a 	callr	r2
   119c0:	00000106 	br	119c8 <alt_get_errno+0x28>
   119c4:	d0a4d004 	addi	r2,gp,-27840
}
   119c8:	e037883a 	mov	sp,fp
   119cc:	dfc00117 	ldw	ra,4(sp)
   119d0:	df000017 	ldw	fp,0(sp)
   119d4:	dec00204 	addi	sp,sp,8
   119d8:	f800283a 	ret

000119dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   119dc:	defffb04 	addi	sp,sp,-20
   119e0:	dfc00415 	stw	ra,16(sp)
   119e4:	df000315 	stw	fp,12(sp)
   119e8:	dc000215 	stw	r16,8(sp)
   119ec:	df000304 	addi	fp,sp,12
   119f0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   119f4:	e0bffe17 	ldw	r2,-8(fp)
   119f8:	10800217 	ldw	r2,8(r2)
   119fc:	10d00034 	orhi	r3,r2,16384
   11a00:	e0bffe17 	ldw	r2,-8(fp)
   11a04:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11a08:	e03ffd15 	stw	zero,-12(fp)
   11a0c:	00002306 	br	11a9c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11a10:	04000074 	movhi	r16,1
   11a14:	840d6004 	addi	r16,r16,13696
   11a18:	e0bffd17 	ldw	r2,-12(fp)
   11a1c:	01400304 	movi	r5,12
   11a20:	1009883a 	mov	r4,r2
   11a24:	00123700 	call	12370 <__mulsi3>
   11a28:	8085883a 	add	r2,r16,r2
   11a2c:	10c00017 	ldw	r3,0(r2)
   11a30:	e0bffe17 	ldw	r2,-8(fp)
   11a34:	10800017 	ldw	r2,0(r2)
   11a38:	1880151e 	bne	r3,r2,11a90 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11a3c:	04000074 	movhi	r16,1
   11a40:	840d6004 	addi	r16,r16,13696
   11a44:	e0bffd17 	ldw	r2,-12(fp)
   11a48:	01400304 	movi	r5,12
   11a4c:	1009883a 	mov	r4,r2
   11a50:	00123700 	call	12370 <__mulsi3>
   11a54:	8085883a 	add	r2,r16,r2
   11a58:	10800204 	addi	r2,r2,8
   11a5c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11a60:	10000b0e 	bge	r2,zero,11a90 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11a64:	01400304 	movi	r5,12
   11a68:	e13ffd17 	ldw	r4,-12(fp)
   11a6c:	00123700 	call	12370 <__mulsi3>
   11a70:	1007883a 	mov	r3,r2
   11a74:	00800074 	movhi	r2,1
   11a78:	108d6004 	addi	r2,r2,13696
   11a7c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11a80:	e0bffe17 	ldw	r2,-8(fp)
   11a84:	18800226 	beq	r3,r2,11a90 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11a88:	00bffcc4 	movi	r2,-13
   11a8c:	00000806 	br	11ab0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11a90:	e0bffd17 	ldw	r2,-12(fp)
   11a94:	10800044 	addi	r2,r2,1
   11a98:	e0bffd15 	stw	r2,-12(fp)
   11a9c:	d0a00617 	ldw	r2,-32744(gp)
   11aa0:	1007883a 	mov	r3,r2
   11aa4:	e0bffd17 	ldw	r2,-12(fp)
   11aa8:	18bfd92e 	bgeu	r3,r2,11a10 <__alt_data_end+0xffff5e90>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11aac:	0005883a 	mov	r2,zero
}
   11ab0:	e6ffff04 	addi	sp,fp,-4
   11ab4:	dfc00217 	ldw	ra,8(sp)
   11ab8:	df000117 	ldw	fp,4(sp)
   11abc:	dc000017 	ldw	r16,0(sp)
   11ac0:	dec00304 	addi	sp,sp,12
   11ac4:	f800283a 	ret

00011ac8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11ac8:	defff604 	addi	sp,sp,-40
   11acc:	dfc00915 	stw	ra,36(sp)
   11ad0:	df000815 	stw	fp,32(sp)
   11ad4:	df000804 	addi	fp,sp,32
   11ad8:	e13ffd15 	stw	r4,-12(fp)
   11adc:	e17ffe15 	stw	r5,-8(fp)
   11ae0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11ae4:	00bfffc4 	movi	r2,-1
   11ae8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11aec:	00bffb44 	movi	r2,-19
   11af0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11af4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11af8:	d1600404 	addi	r5,gp,-32752
   11afc:	e13ffd17 	ldw	r4,-12(fp)
   11b00:	0011e700 	call	11e70 <alt_find_dev>
   11b04:	e0bff815 	stw	r2,-32(fp)
   11b08:	e0bff817 	ldw	r2,-32(fp)
   11b0c:	1000051e 	bne	r2,zero,11b24 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11b10:	e13ffd17 	ldw	r4,-12(fp)
   11b14:	0011f000 	call	11f00 <alt_find_file>
   11b18:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11b1c:	00800044 	movi	r2,1
   11b20:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11b24:	e0bff817 	ldw	r2,-32(fp)
   11b28:	10002b26 	beq	r2,zero,11bd8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11b2c:	e13ff817 	ldw	r4,-32(fp)
   11b30:	00120080 	call	12008 <alt_get_fd>
   11b34:	e0bff915 	stw	r2,-28(fp)
   11b38:	e0bff917 	ldw	r2,-28(fp)
   11b3c:	1000030e 	bge	r2,zero,11b4c <open+0x84>
    {
      status = index;
   11b40:	e0bff917 	ldw	r2,-28(fp)
   11b44:	e0bffa15 	stw	r2,-24(fp)
   11b48:	00002506 	br	11be0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   11b4c:	01400304 	movi	r5,12
   11b50:	e13ff917 	ldw	r4,-28(fp)
   11b54:	00123700 	call	12370 <__mulsi3>
   11b58:	1007883a 	mov	r3,r2
   11b5c:	00800074 	movhi	r2,1
   11b60:	108d6004 	addi	r2,r2,13696
   11b64:	1885883a 	add	r2,r3,r2
   11b68:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11b6c:	e0fffe17 	ldw	r3,-8(fp)
   11b70:	00900034 	movhi	r2,16384
   11b74:	10bfffc4 	addi	r2,r2,-1
   11b78:	1886703a 	and	r3,r3,r2
   11b7c:	e0bffc17 	ldw	r2,-16(fp)
   11b80:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11b84:	e0bffb17 	ldw	r2,-20(fp)
   11b88:	1000051e 	bne	r2,zero,11ba0 <open+0xd8>
   11b8c:	e13ffc17 	ldw	r4,-16(fp)
   11b90:	00119dc0 	call	119dc <alt_file_locked>
   11b94:	e0bffa15 	stw	r2,-24(fp)
   11b98:	e0bffa17 	ldw	r2,-24(fp)
   11b9c:	10001016 	blt	r2,zero,11be0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11ba0:	e0bff817 	ldw	r2,-32(fp)
   11ba4:	10800317 	ldw	r2,12(r2)
   11ba8:	10000826 	beq	r2,zero,11bcc <open+0x104>
   11bac:	e0bff817 	ldw	r2,-32(fp)
   11bb0:	10800317 	ldw	r2,12(r2)
   11bb4:	e1ffff17 	ldw	r7,-4(fp)
   11bb8:	e1bffe17 	ldw	r6,-8(fp)
   11bbc:	e17ffd17 	ldw	r5,-12(fp)
   11bc0:	e13ffc17 	ldw	r4,-16(fp)
   11bc4:	103ee83a 	callr	r2
   11bc8:	00000106 	br	11bd0 <open+0x108>
   11bcc:	0005883a 	mov	r2,zero
   11bd0:	e0bffa15 	stw	r2,-24(fp)
   11bd4:	00000206 	br	11be0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11bd8:	00bffb44 	movi	r2,-19
   11bdc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11be0:	e0bffa17 	ldw	r2,-24(fp)
   11be4:	1000090e 	bge	r2,zero,11c0c <open+0x144>
  {
    alt_release_fd (index);  
   11be8:	e13ff917 	ldw	r4,-28(fp)
   11bec:	0011c240 	call	11c24 <alt_release_fd>
    ALT_ERRNO = -status;
   11bf0:	00119a00 	call	119a0 <alt_get_errno>
   11bf4:	1007883a 	mov	r3,r2
   11bf8:	e0bffa17 	ldw	r2,-24(fp)
   11bfc:	0085c83a 	sub	r2,zero,r2
   11c00:	18800015 	stw	r2,0(r3)
    return -1;
   11c04:	00bfffc4 	movi	r2,-1
   11c08:	00000106 	br	11c10 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   11c0c:	e0bff917 	ldw	r2,-28(fp)
}
   11c10:	e037883a 	mov	sp,fp
   11c14:	dfc00117 	ldw	ra,4(sp)
   11c18:	df000017 	ldw	fp,0(sp)
   11c1c:	dec00204 	addi	sp,sp,8
   11c20:	f800283a 	ret

00011c24 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11c24:	defffc04 	addi	sp,sp,-16
   11c28:	dfc00315 	stw	ra,12(sp)
   11c2c:	df000215 	stw	fp,8(sp)
   11c30:	dc000115 	stw	r16,4(sp)
   11c34:	df000204 	addi	fp,sp,8
   11c38:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   11c3c:	e0bffe17 	ldw	r2,-8(fp)
   11c40:	108000d0 	cmplti	r2,r2,3
   11c44:	1000111e 	bne	r2,zero,11c8c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   11c48:	04000074 	movhi	r16,1
   11c4c:	840d6004 	addi	r16,r16,13696
   11c50:	e0bffe17 	ldw	r2,-8(fp)
   11c54:	01400304 	movi	r5,12
   11c58:	1009883a 	mov	r4,r2
   11c5c:	00123700 	call	12370 <__mulsi3>
   11c60:	8085883a 	add	r2,r16,r2
   11c64:	10800204 	addi	r2,r2,8
   11c68:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   11c6c:	04000074 	movhi	r16,1
   11c70:	840d6004 	addi	r16,r16,13696
   11c74:	e0bffe17 	ldw	r2,-8(fp)
   11c78:	01400304 	movi	r5,12
   11c7c:	1009883a 	mov	r4,r2
   11c80:	00123700 	call	12370 <__mulsi3>
   11c84:	8085883a 	add	r2,r16,r2
   11c88:	10000015 	stw	zero,0(r2)
  }
}
   11c8c:	0001883a 	nop
   11c90:	e6ffff04 	addi	sp,fp,-4
   11c94:	dfc00217 	ldw	ra,8(sp)
   11c98:	df000117 	ldw	fp,4(sp)
   11c9c:	dc000017 	ldw	r16,0(sp)
   11ca0:	dec00304 	addi	sp,sp,12
   11ca4:	f800283a 	ret

00011ca8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11ca8:	defffa04 	addi	sp,sp,-24
   11cac:	df000515 	stw	fp,20(sp)
   11cb0:	df000504 	addi	fp,sp,20
   11cb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11cb8:	0005303a 	rdctl	r2,status
   11cbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11cc0:	e0fffc17 	ldw	r3,-16(fp)
   11cc4:	00bfff84 	movi	r2,-2
   11cc8:	1884703a 	and	r2,r3,r2
   11ccc:	1001703a 	wrctl	status,r2
  
  return context;
   11cd0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11cd4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11cd8:	e0bfff17 	ldw	r2,-4(fp)
   11cdc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11ce0:	e0bffd17 	ldw	r2,-12(fp)
   11ce4:	10800017 	ldw	r2,0(r2)
   11ce8:	e0fffd17 	ldw	r3,-12(fp)
   11cec:	18c00117 	ldw	r3,4(r3)
   11cf0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11cf4:	e0bffd17 	ldw	r2,-12(fp)
   11cf8:	10800117 	ldw	r2,4(r2)
   11cfc:	e0fffd17 	ldw	r3,-12(fp)
   11d00:	18c00017 	ldw	r3,0(r3)
   11d04:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11d08:	e0bffd17 	ldw	r2,-12(fp)
   11d0c:	e0fffd17 	ldw	r3,-12(fp)
   11d10:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11d14:	e0bffd17 	ldw	r2,-12(fp)
   11d18:	e0fffd17 	ldw	r3,-12(fp)
   11d1c:	10c00015 	stw	r3,0(r2)
   11d20:	e0bffb17 	ldw	r2,-20(fp)
   11d24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d28:	e0bffe17 	ldw	r2,-8(fp)
   11d2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11d30:	0001883a 	nop
   11d34:	e037883a 	mov	sp,fp
   11d38:	df000017 	ldw	fp,0(sp)
   11d3c:	dec00104 	addi	sp,sp,4
   11d40:	f800283a 	ret

00011d44 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11d44:	defffb04 	addi	sp,sp,-20
   11d48:	dfc00415 	stw	ra,16(sp)
   11d4c:	df000315 	stw	fp,12(sp)
   11d50:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11d54:	d0a00917 	ldw	r2,-32732(gp)
   11d58:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11d5c:	d0a4d617 	ldw	r2,-27816(gp)
   11d60:	10800044 	addi	r2,r2,1
   11d64:	d0a4d615 	stw	r2,-27816(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11d68:	00002e06 	br	11e24 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11d6c:	e0bffd17 	ldw	r2,-12(fp)
   11d70:	10800017 	ldw	r2,0(r2)
   11d74:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11d78:	e0bffd17 	ldw	r2,-12(fp)
   11d7c:	10800403 	ldbu	r2,16(r2)
   11d80:	10803fcc 	andi	r2,r2,255
   11d84:	10000426 	beq	r2,zero,11d98 <alt_tick+0x54>
   11d88:	d0a4d617 	ldw	r2,-27816(gp)
   11d8c:	1000021e 	bne	r2,zero,11d98 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11d90:	e0bffd17 	ldw	r2,-12(fp)
   11d94:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11d98:	e0bffd17 	ldw	r2,-12(fp)
   11d9c:	10800217 	ldw	r2,8(r2)
   11da0:	d0e4d617 	ldw	r3,-27816(gp)
   11da4:	18801d36 	bltu	r3,r2,11e1c <alt_tick+0xd8>
   11da8:	e0bffd17 	ldw	r2,-12(fp)
   11dac:	10800403 	ldbu	r2,16(r2)
   11db0:	10803fcc 	andi	r2,r2,255
   11db4:	1000191e 	bne	r2,zero,11e1c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11db8:	e0bffd17 	ldw	r2,-12(fp)
   11dbc:	10800317 	ldw	r2,12(r2)
   11dc0:	e0fffd17 	ldw	r3,-12(fp)
   11dc4:	18c00517 	ldw	r3,20(r3)
   11dc8:	1809883a 	mov	r4,r3
   11dcc:	103ee83a 	callr	r2
   11dd0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11dd4:	e0bfff17 	ldw	r2,-4(fp)
   11dd8:	1000031e 	bne	r2,zero,11de8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11ddc:	e13ffd17 	ldw	r4,-12(fp)
   11de0:	0011ca80 	call	11ca8 <alt_alarm_stop>
   11de4:	00000d06 	br	11e1c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11de8:	e0bffd17 	ldw	r2,-12(fp)
   11dec:	10c00217 	ldw	r3,8(r2)
   11df0:	e0bfff17 	ldw	r2,-4(fp)
   11df4:	1887883a 	add	r3,r3,r2
   11df8:	e0bffd17 	ldw	r2,-12(fp)
   11dfc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11e00:	e0bffd17 	ldw	r2,-12(fp)
   11e04:	10c00217 	ldw	r3,8(r2)
   11e08:	d0a4d617 	ldw	r2,-27816(gp)
   11e0c:	1880032e 	bgeu	r3,r2,11e1c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11e10:	e0bffd17 	ldw	r2,-12(fp)
   11e14:	00c00044 	movi	r3,1
   11e18:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11e1c:	e0bffe17 	ldw	r2,-8(fp)
   11e20:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11e24:	e0fffd17 	ldw	r3,-12(fp)
   11e28:	d0a00904 	addi	r2,gp,-32732
   11e2c:	18bfcf1e 	bne	r3,r2,11d6c <__alt_data_end+0xffff61ec>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11e30:	0001883a 	nop
}
   11e34:	0001883a 	nop
   11e38:	e037883a 	mov	sp,fp
   11e3c:	dfc00117 	ldw	ra,4(sp)
   11e40:	df000017 	ldw	fp,0(sp)
   11e44:	dec00204 	addi	sp,sp,8
   11e48:	f800283a 	ret

00011e4c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11e4c:	deffff04 	addi	sp,sp,-4
   11e50:	df000015 	stw	fp,0(sp)
   11e54:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11e58:	000170fa 	wrctl	ienable,zero
}
   11e5c:	0001883a 	nop
   11e60:	e037883a 	mov	sp,fp
   11e64:	df000017 	ldw	fp,0(sp)
   11e68:	dec00104 	addi	sp,sp,4
   11e6c:	f800283a 	ret

00011e70 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11e70:	defffa04 	addi	sp,sp,-24
   11e74:	dfc00515 	stw	ra,20(sp)
   11e78:	df000415 	stw	fp,16(sp)
   11e7c:	df000404 	addi	fp,sp,16
   11e80:	e13ffe15 	stw	r4,-8(fp)
   11e84:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11e88:	e0bfff17 	ldw	r2,-4(fp)
   11e8c:	10800017 	ldw	r2,0(r2)
   11e90:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11e94:	e13ffe17 	ldw	r4,-8(fp)
   11e98:	00103340 	call	10334 <strlen>
   11e9c:	10800044 	addi	r2,r2,1
   11ea0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11ea4:	00000d06 	br	11edc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11ea8:	e0bffc17 	ldw	r2,-16(fp)
   11eac:	10800217 	ldw	r2,8(r2)
   11eb0:	e0fffd17 	ldw	r3,-12(fp)
   11eb4:	180d883a 	mov	r6,r3
   11eb8:	e17ffe17 	ldw	r5,-8(fp)
   11ebc:	1009883a 	mov	r4,r2
   11ec0:	00121880 	call	12188 <memcmp>
   11ec4:	1000021e 	bne	r2,zero,11ed0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11ec8:	e0bffc17 	ldw	r2,-16(fp)
   11ecc:	00000706 	br	11eec <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11ed0:	e0bffc17 	ldw	r2,-16(fp)
   11ed4:	10800017 	ldw	r2,0(r2)
   11ed8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11edc:	e0fffc17 	ldw	r3,-16(fp)
   11ee0:	e0bfff17 	ldw	r2,-4(fp)
   11ee4:	18bff01e 	bne	r3,r2,11ea8 <__alt_data_end+0xffff6328>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11ee8:	0005883a 	mov	r2,zero
}
   11eec:	e037883a 	mov	sp,fp
   11ef0:	dfc00117 	ldw	ra,4(sp)
   11ef4:	df000017 	ldw	fp,0(sp)
   11ef8:	dec00204 	addi	sp,sp,8
   11efc:	f800283a 	ret

00011f00 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11f00:	defffb04 	addi	sp,sp,-20
   11f04:	dfc00415 	stw	ra,16(sp)
   11f08:	df000315 	stw	fp,12(sp)
   11f0c:	df000304 	addi	fp,sp,12
   11f10:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11f14:	d0a00217 	ldw	r2,-32760(gp)
   11f18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11f1c:	00003106 	br	11fe4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11f20:	e0bffd17 	ldw	r2,-12(fp)
   11f24:	10800217 	ldw	r2,8(r2)
   11f28:	1009883a 	mov	r4,r2
   11f2c:	00103340 	call	10334 <strlen>
   11f30:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11f34:	e0bffd17 	ldw	r2,-12(fp)
   11f38:	10c00217 	ldw	r3,8(r2)
   11f3c:	e0bffe17 	ldw	r2,-8(fp)
   11f40:	10bfffc4 	addi	r2,r2,-1
   11f44:	1885883a 	add	r2,r3,r2
   11f48:	10800003 	ldbu	r2,0(r2)
   11f4c:	10803fcc 	andi	r2,r2,255
   11f50:	1080201c 	xori	r2,r2,128
   11f54:	10bfe004 	addi	r2,r2,-128
   11f58:	10800bd8 	cmpnei	r2,r2,47
   11f5c:	1000031e 	bne	r2,zero,11f6c <alt_find_file+0x6c>
    {
      len -= 1;
   11f60:	e0bffe17 	ldw	r2,-8(fp)
   11f64:	10bfffc4 	addi	r2,r2,-1
   11f68:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11f6c:	e0bffe17 	ldw	r2,-8(fp)
   11f70:	e0ffff17 	ldw	r3,-4(fp)
   11f74:	1885883a 	add	r2,r3,r2
   11f78:	10800003 	ldbu	r2,0(r2)
   11f7c:	10803fcc 	andi	r2,r2,255
   11f80:	1080201c 	xori	r2,r2,128
   11f84:	10bfe004 	addi	r2,r2,-128
   11f88:	10800be0 	cmpeqi	r2,r2,47
   11f8c:	1000081e 	bne	r2,zero,11fb0 <alt_find_file+0xb0>
   11f90:	e0bffe17 	ldw	r2,-8(fp)
   11f94:	e0ffff17 	ldw	r3,-4(fp)
   11f98:	1885883a 	add	r2,r3,r2
   11f9c:	10800003 	ldbu	r2,0(r2)
   11fa0:	10803fcc 	andi	r2,r2,255
   11fa4:	1080201c 	xori	r2,r2,128
   11fa8:	10bfe004 	addi	r2,r2,-128
   11fac:	10000a1e 	bne	r2,zero,11fd8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11fb0:	e0bffd17 	ldw	r2,-12(fp)
   11fb4:	10800217 	ldw	r2,8(r2)
   11fb8:	e0fffe17 	ldw	r3,-8(fp)
   11fbc:	180d883a 	mov	r6,r3
   11fc0:	e17fff17 	ldw	r5,-4(fp)
   11fc4:	1009883a 	mov	r4,r2
   11fc8:	00121880 	call	12188 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11fcc:	1000021e 	bne	r2,zero,11fd8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11fd0:	e0bffd17 	ldw	r2,-12(fp)
   11fd4:	00000706 	br	11ff4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   11fd8:	e0bffd17 	ldw	r2,-12(fp)
   11fdc:	10800017 	ldw	r2,0(r2)
   11fe0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11fe4:	e0fffd17 	ldw	r3,-12(fp)
   11fe8:	d0a00204 	addi	r2,gp,-32760
   11fec:	18bfcc1e 	bne	r3,r2,11f20 <__alt_data_end+0xffff63a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11ff0:	0005883a 	mov	r2,zero
}
   11ff4:	e037883a 	mov	sp,fp
   11ff8:	dfc00117 	ldw	ra,4(sp)
   11ffc:	df000017 	ldw	fp,0(sp)
   12000:	dec00204 	addi	sp,sp,8
   12004:	f800283a 	ret

00012008 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12008:	defffa04 	addi	sp,sp,-24
   1200c:	dfc00515 	stw	ra,20(sp)
   12010:	df000415 	stw	fp,16(sp)
   12014:	dc000315 	stw	r16,12(sp)
   12018:	df000404 	addi	fp,sp,16
   1201c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   12020:	00bffa04 	movi	r2,-24
   12024:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12028:	e03ffc15 	stw	zero,-16(fp)
   1202c:	00001d06 	br	120a4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   12030:	04000074 	movhi	r16,1
   12034:	840d6004 	addi	r16,r16,13696
   12038:	e0bffc17 	ldw	r2,-16(fp)
   1203c:	01400304 	movi	r5,12
   12040:	1009883a 	mov	r4,r2
   12044:	00123700 	call	12370 <__mulsi3>
   12048:	8085883a 	add	r2,r16,r2
   1204c:	10800017 	ldw	r2,0(r2)
   12050:	1000111e 	bne	r2,zero,12098 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   12054:	04000074 	movhi	r16,1
   12058:	840d6004 	addi	r16,r16,13696
   1205c:	e0bffc17 	ldw	r2,-16(fp)
   12060:	01400304 	movi	r5,12
   12064:	1009883a 	mov	r4,r2
   12068:	00123700 	call	12370 <__mulsi3>
   1206c:	8085883a 	add	r2,r16,r2
   12070:	e0fffe17 	ldw	r3,-8(fp)
   12074:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12078:	d0e00617 	ldw	r3,-32744(gp)
   1207c:	e0bffc17 	ldw	r2,-16(fp)
   12080:	1880020e 	bge	r3,r2,1208c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   12084:	e0bffc17 	ldw	r2,-16(fp)
   12088:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   1208c:	e0bffc17 	ldw	r2,-16(fp)
   12090:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   12094:	00000606 	br	120b0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12098:	e0bffc17 	ldw	r2,-16(fp)
   1209c:	10800044 	addi	r2,r2,1
   120a0:	e0bffc15 	stw	r2,-16(fp)
   120a4:	e0bffc17 	ldw	r2,-16(fp)
   120a8:	10800810 	cmplti	r2,r2,32
   120ac:	103fe01e 	bne	r2,zero,12030 <__alt_data_end+0xffff64b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   120b0:	e0bffd17 	ldw	r2,-12(fp)
}
   120b4:	e6ffff04 	addi	sp,fp,-4
   120b8:	dfc00217 	ldw	ra,8(sp)
   120bc:	df000117 	ldw	fp,4(sp)
   120c0:	dc000017 	ldw	r16,0(sp)
   120c4:	dec00304 	addi	sp,sp,12
   120c8:	f800283a 	ret

000120cc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   120cc:	defffe04 	addi	sp,sp,-8
   120d0:	df000115 	stw	fp,4(sp)
   120d4:	df000104 	addi	fp,sp,4
   120d8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   120dc:	e0bfff17 	ldw	r2,-4(fp)
   120e0:	10bffe84 	addi	r2,r2,-6
   120e4:	10c00428 	cmpgeui	r3,r2,16
   120e8:	18001a1e 	bne	r3,zero,12154 <alt_exception_cause_generated_bad_addr+0x88>
   120ec:	100690ba 	slli	r3,r2,2
   120f0:	00800074 	movhi	r2,1
   120f4:	10884104 	addi	r2,r2,8452
   120f8:	1885883a 	add	r2,r3,r2
   120fc:	10800017 	ldw	r2,0(r2)
   12100:	1000683a 	jmp	r2
   12104:	00012144 	movi	zero,1157
   12108:	00012144 	movi	zero,1157
   1210c:	00012154 	movui	zero,1157
   12110:	00012154 	movui	zero,1157
   12114:	00012154 	movui	zero,1157
   12118:	00012144 	movi	zero,1157
   1211c:	0001214c 	andi	zero,zero,1157
   12120:	00012154 	movui	zero,1157
   12124:	00012144 	movi	zero,1157
   12128:	00012144 	movi	zero,1157
   1212c:	00012154 	movui	zero,1157
   12130:	00012144 	movi	zero,1157
   12134:	0001214c 	andi	zero,zero,1157
   12138:	00012154 	movui	zero,1157
   1213c:	00012154 	movui	zero,1157
   12140:	00012144 	movi	zero,1157
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12144:	00800044 	movi	r2,1
   12148:	00000306 	br	12158 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1214c:	0005883a 	mov	r2,zero
   12150:	00000106 	br	12158 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   12154:	0005883a 	mov	r2,zero
  }
}
   12158:	e037883a 	mov	sp,fp
   1215c:	df000017 	ldw	fp,0(sp)
   12160:	dec00104 	addi	sp,sp,4
   12164:	f800283a 	ret

00012168 <exit>:
   12168:	defffe04 	addi	sp,sp,-8
   1216c:	000b883a 	mov	r5,zero
   12170:	dc000015 	stw	r16,0(sp)
   12174:	dfc00115 	stw	ra,4(sp)
   12178:	2021883a 	mov	r16,r4
   1217c:	00121e00 	call	121e0 <__call_exitprocs>
   12180:	8009883a 	mov	r4,r16
   12184:	00123980 	call	12398 <_exit>

00012188 <memcmp>:
   12188:	218d883a 	add	r6,r4,r6
   1218c:	21800826 	beq	r4,r6,121b0 <memcmp+0x28>
   12190:	20800003 	ldbu	r2,0(r4)
   12194:	28c00003 	ldbu	r3,0(r5)
   12198:	10c00226 	beq	r2,r3,121a4 <memcmp+0x1c>
   1219c:	10c5c83a 	sub	r2,r2,r3
   121a0:	f800283a 	ret
   121a4:	21000044 	addi	r4,r4,1
   121a8:	29400044 	addi	r5,r5,1
   121ac:	003ff706 	br	1218c <__alt_data_end+0xffff660c>
   121b0:	0005883a 	mov	r2,zero
   121b4:	f800283a 	ret

000121b8 <memcpy>:
   121b8:	2005883a 	mov	r2,r4
   121bc:	2007883a 	mov	r3,r4
   121c0:	218d883a 	add	r6,r4,r6
   121c4:	19800526 	beq	r3,r6,121dc <memcpy+0x24>
   121c8:	29000003 	ldbu	r4,0(r5)
   121cc:	18c00044 	addi	r3,r3,1
   121d0:	29400044 	addi	r5,r5,1
   121d4:	193fffc5 	stb	r4,-1(r3)
   121d8:	003ffa06 	br	121c4 <__alt_data_end+0xffff6644>
   121dc:	f800283a 	ret

000121e0 <__call_exitprocs>:
   121e0:	defff504 	addi	sp,sp,-44
   121e4:	dd000515 	stw	r20,20(sp)
   121e8:	05000074 	movhi	r20,1
   121ec:	dc800315 	stw	r18,12(sp)
   121f0:	dfc00a15 	stw	ra,40(sp)
   121f4:	df000915 	stw	fp,36(sp)
   121f8:	ddc00815 	stw	r23,32(sp)
   121fc:	dd800715 	stw	r22,28(sp)
   12200:	dd400615 	stw	r21,24(sp)
   12204:	dcc00415 	stw	r19,16(sp)
   12208:	dc400215 	stw	r17,8(sp)
   1220c:	dc000115 	stw	r16,4(sp)
   12210:	d9000015 	stw	r4,0(sp)
   12214:	2825883a 	mov	r18,r5
   12218:	a50dc004 	addi	r20,r20,14080
   1221c:	a4400017 	ldw	r17,0(r20)
   12220:	8cc00c17 	ldw	r19,48(r17)
   12224:	8c400c04 	addi	r17,r17,48
   12228:	98004526 	beq	r19,zero,12340 <__call_exitprocs+0x160>
   1222c:	9c000117 	ldw	r16,4(r19)
   12230:	00900034 	movhi	r2,16384
   12234:	10bfffc4 	addi	r2,r2,-1
   12238:	9d402217 	ldw	r21,136(r19)
   1223c:	85bfffc4 	addi	r22,r16,-1
   12240:	80a1883a 	add	r16,r16,r2
   12244:	8421883a 	add	r16,r16,r16
   12248:	8421883a 	add	r16,r16,r16
   1224c:	ac2f883a 	add	r23,r21,r16
   12250:	84000204 	addi	r16,r16,8
   12254:	9c21883a 	add	r16,r19,r16
   12258:	b0002716 	blt	r22,zero,122f8 <__call_exitprocs+0x118>
   1225c:	90000726 	beq	r18,zero,1227c <__call_exitprocs+0x9c>
   12260:	a800041e 	bne	r21,zero,12274 <__call_exitprocs+0x94>
   12264:	b5bfffc4 	addi	r22,r22,-1
   12268:	bdffff04 	addi	r23,r23,-4
   1226c:	843fff04 	addi	r16,r16,-4
   12270:	003ff906 	br	12258 <__alt_data_end+0xffff66d8>
   12274:	b9002017 	ldw	r4,128(r23)
   12278:	913ffa1e 	bne	r18,r4,12264 <__alt_data_end+0xffff66e4>
   1227c:	99000117 	ldw	r4,4(r19)
   12280:	82000017 	ldw	r8,0(r16)
   12284:	213fffc4 	addi	r4,r4,-1
   12288:	b100021e 	bne	r22,r4,12294 <__call_exitprocs+0xb4>
   1228c:	9d800115 	stw	r22,4(r19)
   12290:	00000106 	br	12298 <__call_exitprocs+0xb8>
   12294:	80000015 	stw	zero,0(r16)
   12298:	403ff226 	beq	r8,zero,12264 <__alt_data_end+0xffff66e4>
   1229c:	9f000117 	ldw	fp,4(r19)
   122a0:	a8000526 	beq	r21,zero,122b8 <__call_exitprocs+0xd8>
   122a4:	00800044 	movi	r2,1
   122a8:	1592983a 	sll	r9,r2,r22
   122ac:	a9404017 	ldw	r5,256(r21)
   122b0:	494a703a 	and	r5,r9,r5
   122b4:	2800021e 	bne	r5,zero,122c0 <__call_exitprocs+0xe0>
   122b8:	403ee83a 	callr	r8
   122bc:	00000906 	br	122e4 <__call_exitprocs+0x104>
   122c0:	a9004117 	ldw	r4,260(r21)
   122c4:	4908703a 	and	r4,r9,r4
   122c8:	2000041e 	bne	r4,zero,122dc <__call_exitprocs+0xfc>
   122cc:	b9400017 	ldw	r5,0(r23)
   122d0:	d9000017 	ldw	r4,0(sp)
   122d4:	403ee83a 	callr	r8
   122d8:	00000206 	br	122e4 <__call_exitprocs+0x104>
   122dc:	b9000017 	ldw	r4,0(r23)
   122e0:	403ee83a 	callr	r8
   122e4:	99000117 	ldw	r4,4(r19)
   122e8:	e13fcc1e 	bne	fp,r4,1221c <__alt_data_end+0xffff669c>
   122ec:	89000017 	ldw	r4,0(r17)
   122f0:	993fdc26 	beq	r19,r4,12264 <__alt_data_end+0xffff66e4>
   122f4:	003fc906 	br	1221c <__alt_data_end+0xffff669c>
   122f8:	00800034 	movhi	r2,0
   122fc:	10800004 	addi	r2,r2,0
   12300:	10000f26 	beq	r2,zero,12340 <__call_exitprocs+0x160>
   12304:	99400117 	ldw	r5,4(r19)
   12308:	99000017 	ldw	r4,0(r19)
   1230c:	2800091e 	bne	r5,zero,12334 <__call_exitprocs+0x154>
   12310:	20000826 	beq	r4,zero,12334 <__call_exitprocs+0x154>
   12314:	89000015 	stw	r4,0(r17)
   12318:	a8000226 	beq	r21,zero,12324 <__call_exitprocs+0x144>
   1231c:	a809883a 	mov	r4,r21
   12320:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   12324:	9809883a 	mov	r4,r19
   12328:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   1232c:	8cc00017 	ldw	r19,0(r17)
   12330:	003fbd06 	br	12228 <__alt_data_end+0xffff66a8>
   12334:	9823883a 	mov	r17,r19
   12338:	2027883a 	mov	r19,r4
   1233c:	003fba06 	br	12228 <__alt_data_end+0xffff66a8>
   12340:	dfc00a17 	ldw	ra,40(sp)
   12344:	df000917 	ldw	fp,36(sp)
   12348:	ddc00817 	ldw	r23,32(sp)
   1234c:	dd800717 	ldw	r22,28(sp)
   12350:	dd400617 	ldw	r21,24(sp)
   12354:	dd000517 	ldw	r20,20(sp)
   12358:	dcc00417 	ldw	r19,16(sp)
   1235c:	dc800317 	ldw	r18,12(sp)
   12360:	dc400217 	ldw	r17,8(sp)
   12364:	dc000117 	ldw	r16,4(sp)
   12368:	dec00b04 	addi	sp,sp,44
   1236c:	f800283a 	ret

00012370 <__mulsi3>:
   12370:	0005883a 	mov	r2,zero
   12374:	20000726 	beq	r4,zero,12394 <__mulsi3+0x24>
   12378:	20c0004c 	andi	r3,r4,1
   1237c:	2008d07a 	srli	r4,r4,1
   12380:	18000126 	beq	r3,zero,12388 <__mulsi3+0x18>
   12384:	1145883a 	add	r2,r2,r5
   12388:	294b883a 	add	r5,r5,r5
   1238c:	203ffa1e 	bne	r4,zero,12378 <__alt_data_end+0xffff67f8>
   12390:	f800283a 	ret
   12394:	f800283a 	ret

00012398 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12398:	defffd04 	addi	sp,sp,-12
   1239c:	df000215 	stw	fp,8(sp)
   123a0:	df000204 	addi	fp,sp,8
   123a4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   123a8:	0001883a 	nop
   123ac:	e0bfff17 	ldw	r2,-4(fp)
   123b0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   123b4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   123b8:	10000226 	beq	r2,zero,123c4 <_exit+0x2c>
    ALT_SIM_FAIL();
   123bc:	002af070 	cmpltui	zero,zero,43969
   123c0:	00000106 	br	123c8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   123c4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   123c8:	003fff06 	br	123c8 <__alt_data_end+0xffff6848>
